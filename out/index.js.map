{"version":3,"sources":["/home/winetree94/Workspaces/personal/xterm-pty/out/index.js","../src/eventEmitter.ts","../src/utils.ts","../src/termios.ts","../src/lineDiscipline.ts","../src/pty.ts","../src/client-server/termiosData.ts","../src/client-server/ttyClient.ts","../src/client-server/ttyServer.ts"],"names":["Flags","idx","c"],"mappings":"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","file":"/home/winetree94/Workspaces/personal/xterm-pty/out/index.js","sourcesContent":[null,"type Listener<T> = (arg: T) => void;\nexport type Event<T> = (listener: Listener<T>) => { dispose: () => void };\n\nexport class EventEmitter<T> {\n  private listeners = new Set<Listener<T>>();\n\n  private _register(listener: Listener<T>) {\n    this.listeners.add(listener);\n    return {\n      dispose: () => {\n        this.listeners.delete(listener);\n      }\n    };\n  }\n\n  register = this._register.bind(this);\n\n  public fire(arg: T): void {\n    for (const listener of this.listeners) {\n      try {\n        listener(arg);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  }\n}\n","export const BS = 8;\nexport const TAB = 9;\nexport const NL = 10;\nexport const CR = 13;\nexport const SP = 32;\n\nexport const isalnum = (c: number) =>\n  (0x30 <= c && c <= 0x39) ||\n  (0x41 <= c && c <= 0x5a) ||\n  c == 0x5f ||\n  (0x61 <= c && c <= 0x7a);\nexport const iscntrl = (c: number) =>\n  (0x00 <= c && c <= 0x1f && c != 0x09) || c == 0x7f;\nexport const isUtf8ContinuationByte = (c: number) => (c & 0xc0) == 0x80;\nexport const tolower = (c: number) => (0x41 <= c && c <= 0x5a ? c + 0x20 : c);\nexport const toupper = (c: number) => (0x61 <= c && c <= 0x7a ? c - 0x20 : c);\n\nconst utf8Encoder = new TextEncoder();\n\nexport const stringToUtf8Bytes = (str: string) =>\n  Array.from(utf8Encoder.encode(str));\n","// This module provides a Termios class for termios struct data.\n//\n// https://man7.org/linux/man-pages/man3/termios.3.html\n\nexport const enum Flags {\n  // c_iflag\n  ISTRIP = 0x0020,\n  INLCR = 0x0040,\n  IGNCR = 0x0080,\n  ICRNL = 0x0100,\n  IUCLC = 0x0200,\n  IXON = 0x0400,\n  IXANY = 0x0800,\n  IMAXBEL = 0x2000,\n  IUTF8 = 0x4000,\n\n  // c_oflag\n  OPOST = 0x0001,\n  OLCUC = 0x0002,\n  ONLCR = 0x0004,\n  OCRNL = 0x0008,\n  ONOCR = 0x0010,\n  ONLRET = 0x0020,\n  TABDLY = 0x1800,\n  XTABS = 0x1800,\n\n  // c_lflag\n  ISIG = 0x0001,\n  ICANON = 0x0002,\n  ECHO = 0x0008,\n  ECHOE = 0x0010,\n  ECHOK = 0x0020,\n  ECHONL = 0x0040,\n  NOFLSH = 0x0080,\n  ECHOCTL = 0x0200,\n  ECHOPRT = 0x0400,\n  ECHOKE = 0x0800,\n  IEXTEN = 0x8000,\n\n  // c_cc\n  VINTR = 0,\n  VQUIT = 1,\n  VERASE = 2,\n  VKILL = 3,\n  VEOF = 4,\n  VTIME = 5,\n  VMIN = 6,\n  VSWTCH = 7,\n  VSTART = 8,\n  VSTOP = 9,\n  VSUSP = 10,\n  VEOL = 11,\n  VREPRINT = 12,\n  VDISCARD = 13,\n  VWERASE = 14,\n  VLNEXT = 15,\n  VEOL2 = 16\n}\n\nexport interface TermiosConfig {\n  readonly iflag: number;\n  readonly oflag: number;\n  readonly cflag: number;\n  readonly lflag: number;\n  readonly cc: ReadonlyArray<number>;\n}\n\nexport class Termios implements TermiosConfig {\n  readonly ISTRIP_P: boolean;\n  readonly INLCR_P: boolean;\n  readonly IGNCR_P: boolean;\n  readonly ICRNL_P: boolean;\n  readonly IUCLC_P: boolean;\n  readonly IXON_P: boolean;\n  readonly IXANY_P: boolean;\n  readonly IUTF8_P: boolean;\n  readonly OPOST_P: boolean;\n  readonly OLCUC_P: boolean;\n  readonly ONLCR_P: boolean;\n  readonly OCRNL_P: boolean;\n  readonly ONOCR_P: boolean;\n  readonly ONLRET_P: boolean;\n  readonly TABDLY_XTABS_P: boolean;\n  readonly ISIG_P: boolean;\n  readonly ICANON_P: boolean;\n  readonly ECHO_P: boolean;\n  readonly ECHOE_P: boolean;\n  readonly ECHOK_P: boolean;\n  readonly ECHONL_P: boolean;\n  readonly NOFLSH_P: boolean;\n  readonly ECHOCTL_P: boolean;\n  readonly ECHOPRT_P: boolean;\n  readonly ECHOKE_P: boolean;\n  readonly IEXTEN_P: boolean;\n\n  readonly INTR_V: number;\n  readonly QUIT_V: number;\n  readonly ERASE_V: number;\n  readonly KILL_V: number;\n  readonly EOF_V: number;\n  readonly TIME_V: number;\n  readonly MIN_V: number;\n  readonly SWTCH_V: number;\n  readonly START_V: number;\n  readonly STOP_V: number;\n  readonly SUSP_V: number;\n  readonly EOL_V: number;\n  readonly REPRINT_V: number;\n  readonly DISCARD_V: number;\n  readonly WERASE_V: number;\n  readonly LNEXT_V: number;\n  readonly EOL2_V: number;\n\n  constructor(\n    readonly iflag: number,\n    readonly oflag: number,\n    readonly cflag: number,\n    readonly lflag: number,\n    readonly cc: ReadonlyArray<number>\n  ) {\n    this.ISTRIP_P = (this.iflag & Flags.ISTRIP) != 0;\n    this.INLCR_P = (this.iflag & Flags.INLCR) != 0;\n    this.IGNCR_P = (this.iflag & Flags.IGNCR) != 0;\n    this.ICRNL_P = (this.iflag & Flags.ICRNL) != 0;\n    this.IUCLC_P = (this.iflag & Flags.IUCLC) != 0;\n    this.IXON_P = (this.iflag & Flags.IXON) != 0;\n    this.IXANY_P = (this.iflag & Flags.IXANY) != 0;\n    this.IUTF8_P = (this.iflag & Flags.IUTF8) != 0;\n    this.OPOST_P = (this.oflag & Flags.OPOST) != 0;\n    this.OLCUC_P = (this.oflag & Flags.OLCUC) != 0;\n    this.ONLCR_P = (this.oflag & Flags.ONLCR) != 0;\n    this.OCRNL_P = (this.oflag & Flags.OCRNL) != 0;\n    this.ONOCR_P = (this.oflag & Flags.ONOCR) != 0;\n    this.ONLRET_P = (this.oflag & Flags.ONLRET) != 0;\n    this.TABDLY_XTABS_P = (this.oflag & Flags.TABDLY) == Flags.XTABS;\n    this.ISIG_P = (this.lflag & Flags.ISIG) != 0;\n    this.ICANON_P = (this.lflag & Flags.ICANON) != 0;\n    this.ECHO_P = (this.lflag & Flags.ECHO) != 0;\n    this.ECHOE_P = (this.lflag & Flags.ECHOE) != 0;\n    this.ECHOK_P = (this.lflag & Flags.ECHOK) != 0;\n    this.ECHONL_P = (this.lflag & Flags.ECHONL) != 0;\n    this.NOFLSH_P = (this.lflag & Flags.NOFLSH) != 0;\n    this.ECHOCTL_P = (this.lflag & Flags.ECHOCTL) != 0;\n    this.ECHOPRT_P = (this.lflag & Flags.ECHOPRT) != 0;\n    this.ECHOKE_P = (this.lflag & Flags.ECHOKE) != 0;\n    this.IEXTEN_P = (this.lflag & Flags.IEXTEN) != 0;\n\n    this.INTR_V = this.cc[Flags.VINTR];\n    this.QUIT_V = this.cc[Flags.VQUIT];\n    this.ERASE_V = this.cc[Flags.VERASE];\n    this.KILL_V = this.cc[Flags.VKILL];\n    this.EOF_V = this.cc[Flags.VEOF];\n    this.TIME_V = this.cc[Flags.VTIME];\n    this.MIN_V = this.cc[Flags.VMIN];\n    this.SWTCH_V = this.cc[Flags.VSWTCH];\n    this.START_V = this.cc[Flags.VSTART];\n    this.STOP_V = this.cc[Flags.VSTOP];\n    this.SUSP_V = this.cc[Flags.VSUSP];\n    this.EOL_V = this.cc[Flags.VEOL];\n    this.REPRINT_V = this.cc[Flags.VREPRINT];\n    this.DISCARD_V = this.cc[Flags.VDISCARD];\n    this.WERASE_V = this.cc[Flags.VWERASE];\n    this.LNEXT_V = this.cc[Flags.VLNEXT];\n    this.EOL2_V = this.cc[Flags.VEOL2];\n  }\n\n  static fromConfig(config: TermiosConfig) {\n    return new Termios(\n      config.iflag,\n      config.oflag,\n      config.cflag,\n      config.lflag,\n      config.cc\n    );\n  }\n\n  clone() {\n    return Termios.fromConfig(this);\n  }\n}\n\nexport const defaultTermios = new Termios(\n  Flags.ICRNL | Flags.IXON | Flags.IMAXBEL | Flags.IUTF8,\n  Flags.OPOST | Flags.ONLCR,\n  0x00bf, // c_cflag is not supported\n  Flags.ISIG |\n    Flags.ICANON |\n    Flags.ECHO |\n    Flags.ECHOE |\n    Flags.ECHOK |\n    Flags.ECHOCTL |\n    Flags.ECHOKE |\n    Flags.IEXTEN,\n  [\n    0x03, 0x1c, 0x7f, 0x15, 0x04, 0x00, 0x01, 0x00, 0x11, 0x13, 0x1a, 0x00,\n    0x12, 0x0f, 0x17, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n  ]\n);\n","// This module provides LineDiscipline class.\n//\n// It glues the low-level device (e.g., xterm.js) with the high-level process\n// (e.g., JavaScript code and an Emscripten'ed process).\n//\n// It receives an input event from the lower layer (writeFromLower()).\n// Depending on the \"termios\" configuration, it handles some special characters\n// such as Ctrl+C, applies some translations to the input, echos it back to the\n// lower layers, etc. Finally it conveys the input to the upper layer\n// (onWriteToUpper() or onSignalToUpper()).\n//\n// It also receives an output event form the upper layer (writeFromUpper()).\n// Again, it applies some translation (such as replacing NL with CR+NL)\n// depending on termios. And finally it conveys the output to the lower layer\n// (onWriteToLower()).\n//\n//                +-------+\n//                | Upper | (e.g., an Emscripten'ed process)\n//                +-------+\n//                  |   ^\n// writeFromUpper() |   | onWriteToUpper() (and onSignalToUpper())\n//                  V   |\n//           +-----------------+\n//           | Line discipline |\n//           +-----------------+\n//                  |   ^\n// onWriteToLower() |   | writeFromLower()\n//                  V   |\n//                +-------+\n//                | Lower | (e.g., xterm.js)\n//                +-------+\n//\n// References:\n//\n// https://en.wikipedia.org/wiki/Line_discipline\n// https://man7.org/linux/man-pages/man3/termios.3.html\n// https://pubs.opengroup.org/onlinepubs/009695299/basedefs/xbd_chap11.html\n// https://pubs.opengroup.org/onlinepubs/009695299/utilities/stty.html\n// https://github.com/torvalds/linux/blob/master/drivers/tty/n_tty.c\n\nimport {\n  BS,\n  TAB,\n  NL,\n  CR,\n  SP,\n  isalnum,\n  iscntrl,\n  isUtf8ContinuationByte,\n  tolower,\n  toupper,\n  stringToUtf8Bytes,\n} from \"./utils\";\nimport { Signal } from \"./pty\";\nimport { Termios, defaultTermios } from \"./termios\";\nimport { EventEmitter, Event } from \"./eventEmitter\";\n\ntype KeyAction =\n  | \"normal\"\n  | \"VEOF\"\n  | \"VEOL\"\n  | \"VERASE\"\n  | \"VKILL\"\n  | \"VREPRINT\"\n  | \"VWERASE\"\n  | \"VLNEXT\"\n  | \"VSTART\"\n  | \"VSTOP\"\n  | \"VINTR\"\n  | \"VQUIT\"\n  | \"VSUSP\";\n\nexport class LineDiscipline {\n  // callbacks\n  private _onWriteToLower = new EventEmitter<number[]>();\n  readonly onWriteToLower = this._onWriteToLower.register;\n\n  private _onWriteToUpper = new EventEmitter<number[]>();\n  readonly onWriteToUpper = this._onWriteToUpper.register;\n\n  private _onSignalToUpper = new EventEmitter<Signal>();\n  readonly onSignalToUpper = this._onSignalToUpper.register;\n\n  private _onFlowActivated = new EventEmitter<void>();\n  readonly onFlowActivated = this._onFlowActivated.register;\n\n  private _onFlowDeactivated = new EventEmitter<void>();\n  readonly onFlowDeactivated = this._onFlowDeactivated.register;\n\n  // states\n  private T = defaultTermios;\n  private keyActions: KeyAction[] = new Array(256).fill(\"normal\");\n\n  private flowActivated = true; // false after VSTOP (C-s), true after VSTART (C-q)\n  private column = 0; // the column that the cursor is in\n  private baseColumn = 0; // the column that starts the to-upper buffer\n  private vlnext = false; // waiting for the next character after VLNEXT (C-v)\n  private echoprt = false; // erasing with ECHOPRT\n\n  private toLowerBuf: number[] = []; // flushed immediately every call\n  private toUpperBuf: number[] = []; // flushed after NL is input (in ICANON mode)\n\n  constructor() {\n    this.termios = defaultTermios;\n  }\n\n  private activateFlow() {\n    this.flowActivated = true;\n    this._onFlowActivated.fire();\n  }\n\n  private deactivateFlow() {\n    this.flowActivated = false;\n    this._onFlowDeactivated.fire();\n  }\n\n  get flow() {\n    return this.flowActivated;\n  }\n\n  get termios() {\n    return this.T;\n  }\n\n  set termios(T: Termios) {\n    this.T = T;\n\n    const keyActions: KeyAction[] = new Array(256).fill(\"normal\");\n\n    if (T.ICANON_P) {\n      keyActions[T.EOF_V] = \"VEOF\";\n      keyActions[T.EOL_V] = \"VEOL\";\n      keyActions[T.EOL2_V] = \"VEOL\";\n      keyActions[T.ERASE_V] = \"VERASE\";\n      keyActions[T.KILL_V] = \"VKILL\";\n      if (T.IEXTEN_P) {\n        keyActions[T.REPRINT_V] = \"VREPRINT\";\n        keyActions[T.WERASE_V] = \"VWERASE\";\n      }\n    }\n    if (T.IEXTEN_P) {\n      keyActions[T.LNEXT_V] = \"VLNEXT\";\n    }\n    if (T.IXON_P) {\n      keyActions[T.START_V] = \"VSTART\";\n      keyActions[T.STOP_V] = \"VSTOP\";\n    }\n    if (T.ISIG_P) {\n      keyActions[T.INTR_V] = \"VINTR\";\n      keyActions[T.QUIT_V] = \"VQUIT\";\n      keyActions[T.SUSP_V] = \"VSUSP\";\n    }\n    keyActions[0] = \"normal\"; // Ignore any action for NUL character\n\n    this.keyActions = keyActions;\n\n    if (!this.T.IXON_P) {\n      this.activateFlow();\n      this.flushToLower();\n    }\n  }\n\n  private clearToLower() {\n    this.toLowerBuf.length = 0;\n  }\n\n  private flushToLower() {\n    if (this.flowActivated == false) return;\n    this._onWriteToLower.fire(this.toLowerBuf);\n    this.clearToLower();\n  }\n\n  private outputToLower(buf: number[]) {\n    this.toLowerBuf.push(...buf);\n  }\n\n  private updateBaseColumn() {\n    if (this.toUpperBuf.length == 0) {\n      this.baseColumn = this.column;\n    }\n  }\n\n  private clearToUpper() {\n    this.toUpperBuf.length = 0;\n    this.updateBaseColumn();\n  }\n\n  private flushToUpper() {\n    this._onWriteToUpper.fire(this.toUpperBuf);\n    this.clearToUpper();\n  }\n\n  private outputToUpper(c: number) {\n    this.toUpperBuf.push(c);\n  }\n\n  private outputToLowerWithPostprocess(c: number) {\n    if (this.T.OPOST_P) {\n      switch (c) {\n        case BS:\n          if (this.column > 0) this.column--;\n          this.outputToLower([BS]);\n          break;\n        case TAB: {\n          const spaces = 8 - (this.column % 8);\n          this.column += spaces;\n          this.outputToLower(\n            this.T.TABDLY_XTABS_P ? new Array(spaces).fill(SP) : [TAB]\n          );\n          break;\n        }\n        case NL:\n          if (this.T.ONLCR_P) {\n            this.baseColumn = this.column = 0;\n            this.outputToLower([CR, NL]);\n          } else if (this.T.ONLRET_P) {\n            this.column = 0;\n            this.outputToLower([NL]);\n          } else {\n            this.baseColumn = this.column;\n            this.outputToLower([NL]);\n          }\n          break;\n        case CR:\n          if (this.T.ONOCR_P && this.column == 0) {\n            // nothing printed\n          } else if (this.T.OCRNL_P) {\n            if (this.T.ONLRET_P) this.baseColumn = this.column = 0;\n            this.outputToLower([NL]);\n          } else {\n            this.baseColumn = this.column = 0;\n            this.outputToLower([CR]);\n          }\n          break;\n        default:\n          if (!(this.T.IUTF8_P && isUtf8ContinuationByte(c))) this.column++;\n          this.outputToLower(this.T.OLCUC_P ? [toupper(c)] : [c]);\n          break;\n      }\n    } else {\n      this.outputToLower([c]);\n    }\n  }\n\n  private echoToLower(chars: number | number[], raw?: boolean) {\n    if (typeof chars == \"number\") chars = [chars];\n\n    for (const c of chars) {\n      if (this.T.ECHOCTL_P && iscntrl(c) && c != TAB && !raw) {\n        this.outputToLower([94 /* '^' */, c ^ 0x40]);\n        this.column += 2;\n      } else {\n        this.outputToLowerWithPostprocess(c);\n      }\n    }\n  }\n\n  private inputFromLowerWithPreprocess(c: number) {\n    if (c == CR) {\n      if (this.T.IGNCR_P) return;\n      if (this.T.ICRNL_P) c = NL;\n    } else if (c == NL && this.T.INLCR_P) {\n      c = CR;\n    }\n\n    if (this.T.ICANON_P && c == NL) {\n      // flush the to-upper buffer\n      if (this.T.ECHO_P || this.T.ECHONL_P) {\n        this.echoToLower(NL, true);\n        this.flushToLower();\n      }\n      this.outputToUpper(NL);\n      this.flushToUpper();\n    } else if (this.T.ECHO_P) {\n      this.finishECHOPRT();\n      this.updateBaseColumn();\n      if (c == NL) {\n        this.echoToLower(NL, true);\n      } else {\n        this.echoToLower(c);\n      }\n      this.flushToLower();\n      this.outputToUpper(c);\n    } else {\n      this.outputToUpper(c);\n    }\n    // writeFromLower will flush the to-upper buffer later\n  }\n\n  private erase(type: \"VERASE\" | \"VWERASE\" | \"VKILL\") {\n    if (this.toUpperBuf.length == 0) return;\n\n    if (type == \"VKILL\") {\n      if (!this.T.ECHO_P) {\n        this.clearToUpper();\n        return;\n      }\n      if (!this.T.ECHOK_P || !this.T.ECHOKE_P || !this.T.ECHOE_P) {\n        this.clearToUpper();\n        this.finishECHOPRT();\n        this.echoToLower(this.T.KILL_V);\n        if (this.T.ECHOK_P) this.echoToLower(NL, true);\n        return;\n      }\n    }\n\n    let alnumsFound = false;\n    for (let idx = this.toUpperBuf.length - 1; idx >= 0; idx--) {\n      const c = this.toUpperBuf[idx];\n      if (this.T.IUTF8_P && isUtf8ContinuationByte(c)) continue;\n\n      if (type == \"VWERASE\") {\n        if (isalnum(c) || c == 0x5f /* '_' */) {\n          alnumsFound = true;\n        } else if (alnumsFound) break;\n      }\n\n      const removedChar = this.toUpperBuf.splice(idx);\n      if (this.T.ECHO_P) {\n        if (this.T.ECHOPRT_P) {\n          this.startECHOPRT();\n          this.echoToLower(removedChar);\n        } else if (type == \"VERASE\" && !this.T.ECHOE_P) {\n          this.echoToLower(this.T.ERASE_V);\n        } else if (c == TAB) {\n          let count = 0;\n          let tabFound = false;\n\n          for (let idx = this.toUpperBuf.length - 1; idx >= 0; idx--) {\n            const c = this.toUpperBuf[idx];\n            if (c == TAB) {\n              tabFound = true;\n              break;\n            } else if (iscntrl(c)) {\n              if (this.T.ECHOCTL_P) count += 2;\n            } else if (this.T.IUTF8_P && isUtf8ContinuationByte(c)) {\n              // ignore\n            } else {\n              count++;\n            }\n          }\n          if (!tabFound) count += this.baseColumn;\n\n          count = 8 - (count % 8);\n          this.outputToLower(new Array(count).fill(BS));\n          this.column = Math.max(0, this.column - count);\n        } else {\n          if (iscntrl(c) && this.T.ECHOCTL_P) {\n            this.echoToLower([BS, SP, BS], true);\n          }\n          if (!iscntrl(c) || this.T.ECHOCTL_P) {\n            // delete '^' of ECHOCTL\n            this.echoToLower([BS, SP, BS], true);\n          }\n        }\n      }\n      if (type == \"VERASE\") break;\n    }\n    if (this.toUpperBuf.length == 0) {\n      this.clearToUpper();\n      if (this.T.ECHO_P) this.finishECHOPRT();\n    }\n  }\n\n  private startECHOPRT() {\n    if (!this.echoprt) {\n      this.echoToLower(92 /* '\\' */, true);\n      this.echoprt = true;\n    }\n  }\n\n  private finishECHOPRT() {\n    if (this.echoprt) {\n      this.echoToLower(47 /* '/' */, true);\n      this.echoprt = false;\n    }\n  }\n\n  private signal(sig: Signal, c: number) {\n    this._onSignalToUpper.fire(sig);\n    if (!this.T.NOFLSH_P) {\n      this.clearToLower();\n      this.clearToUpper();\n    }\n    if (this.T.IXON_P) this.activateFlow();\n    if (this.T.ECHO_P) this.echoToLower(c);\n    this.flushToLower();\n  }\n\n  private checkStartFlow() {\n    if (this.flowActivated == false && this.T.IXON_P && this.T.IXANY_P) {\n      this.activateFlow();\n      this.flushToLower();\n    }\n  }\n\n  private nextLiteral() {\n    this.vlnext = true;\n    if (this.T.ECHO_P) {\n      this.finishECHOPRT();\n      if (this.T.ECHOCTL_P) {\n        this.echoToLower([94 /* '^' */, BS], true);\n        this.flushToLower();\n      }\n    }\n  }\n\n  private reprint() {\n    this.finishECHOPRT();\n    this.echoToLower(this.T.REPRINT_V);\n    this.echoToLower(NL, true);\n    this.echoToLower(this.toUpperBuf);\n  }\n\n  writeFromLower(arg: number[] | string) {\n    const buf = typeof arg == \"string\" ? stringToUtf8Bytes(arg) : arg;\n\n    for (let c of buf) {\n      if (this.T.ISTRIP_P) c &= 0x7f;\n      if (this.T.IUCLC_P && this.T.IEXTEN_P) c = tolower(c);\n\n      const keyAction = this.vlnext ? \"normal\" : this.keyActions[c];\n      this.vlnext = false;\n\n      switch (keyAction) {\n        case \"normal\":\n          this.checkStartFlow();\n          this.inputFromLowerWithPreprocess(c);\n          break;\n        case \"VERASE\":\n        case \"VWERASE\":\n        case \"VKILL\":\n          this.checkStartFlow();\n          this.erase(keyAction);\n          this.flushToLower();\n          break;\n        case \"VEOF\":\n          this.checkStartFlow();\n          this.flushToUpper();\n          break;\n        case \"VEOL\":\n          this.checkStartFlow();\n          if (this.T.ECHO_P) {\n            this.echoToLower(c);\n            this.flushToLower();\n          }\n          this.outputToUpper(c);\n          this.flushToUpper();\n          break;\n        case \"VLNEXT\":\n          this.checkStartFlow();\n          this.nextLiteral();\n          break;\n        case \"VREPRINT\":\n          this.checkStartFlow();\n          this.reprint();\n          this.flushToLower();\n          break;\n        case \"VSTART\":\n          this.activateFlow();\n          this.flushToLower();\n          break;\n        case \"VSTOP\":\n          this.deactivateFlow();\n          break;\n        case \"VINTR\":\n          this.signal(\"SIGINT\", c);\n          break;\n        case \"VQUIT\":\n          this.signal(\"SIGQUIT\", c);\n          break;\n        case \"VSUSP\":\n          this.signal(\"SIGTSTP\", c);\n          break;\n      }\n    }\n\n    if (!this.T.ICANON_P) {\n      this.flushToUpper();\n    }\n  }\n\n  writeFromUpper(arg: number[] | string) {\n    if (this.flowActivated == false) {\n      throw \"Do not write anything during flowStatus is stopped\";\n    }\n\n    const buf = typeof arg == \"string\" ? stringToUtf8Bytes(arg) : arg;\n\n    for (const c of buf) this.outputToLowerWithPostprocess(c);\n    this.flushToLower();\n  }\n}\n\nexport interface LineDiscipline {\n  readonly onWriteToLower: Event<number[]>;\n  readonly onWriteToUpper: Event<number[]>;\n  readonly onSignalToUpper: Event<Signal>;\n  readonly onFlowActivated: Event<void>;\n  readonly onFlowDeactivated: Event<void>;\n  flow: boolean;\n  termios: Termios;\n  writeFromLower: (arg: number[] | string) => void;\n  writeFromUpper: (arg: number[] | string) => void;\n}\n","// This module provides the \"openpty\" function.\n// It returns a master object, which is an addon for xterm.js, and a slave\n// object, which serves as stdin/stdout for a process.\n//\n// Typical usage:\n//\n//   // Start an xterm.js instance\n//   const xterm = new Terminal();\n//\n//   // Create master/slave objects\n//   const { master, slave } = openpty();\n//\n//   // Connect the master object to xterm.js\n//   xterm.loadAddon(ldiscAddon);\n//\n//   // Use slave.write instead of xterm.write\n//   slave.write(\"Hello, world!\\nInput your name:\");\n//\n//   // Use slave.onReadable and slave.read instead of xterm.onData\n//   slave.onReadable(() => {\n//     xterm.write(`Hi, ${ slave.read().trim() }!\\n`);\n//   });\n\nimport { Terminal, ITerminalAddon, IDisposable } from \"xterm\";\nimport { EventEmitter } from \"./eventEmitter\";\nimport { LineDiscipline } from \"./lineDiscipline\";\nimport { Termios, TermiosConfig } from \"./termios\";\nimport { stringToUtf8Bytes } from \"./utils\";\n\nexport type Signal = \"SIGINT\" | \"SIGQUIT\" | \"SIGTSTP\" | \"SIGWINCH\";\n\nconst bufferLimit = 4096;\n\nclass Master implements ITerminalAddon {\n  private disposables: IDisposable[] = [];\n\n  private _onWrite = new EventEmitter<[Uint8Array, () => void]>();\n  readonly onWrite = this._onWrite.register;\n\n  private fromLdiscToLowerBuffer: number[] = [];\n  private waitingForLower = false; // xterm.js implements buffering\n\n  private notifyWritable;\n  private notifyResize;\n\n  constructor(private ldisc: LineDiscipline, private slave: Slave) {\n    const flushToLower = () => {\n      if (this.fromLdiscToLowerBuffer.length >= 1) {\n        this.waitingForLower = true;\n\n        const buf = new Uint8Array(this.fromLdiscToLowerBuffer.splice(0, 4096));\n\n        if (this.fromLdiscToLowerBuffer.length <= bufferLimit)\n          this.notifyWritable();\n\n        this._onWrite.fire([buf, flushToLower]);\n      } else {\n        this.waitingForLower = false;\n      }\n    };\n\n    this.ldisc.onWriteToLower((buf) => {\n      this.fromLdiscToLowerBuffer.push(...buf);\n      if (!this.waitingForLower) flushToLower();\n    });\n\n    const { notifyWritable, notifyResize } = slave.initFromMaster();\n    this.notifyWritable = notifyWritable;\n    this.notifyResize = notifyResize;\n  }\n\n  activate(xterm: Terminal) {\n    this.onWrite(([buf, callback]) => xterm.write(buf, callback));\n\n    const onData = (str: string) => this.ldisc.writeFromLower(str);\n\n    this.disposables.push(\n      xterm.onData(onData),\n      xterm.onBinary(onData),\n      xterm.onResize(({ cols, rows }) => this.notifyResize(rows, cols))\n    );\n  }\n\n  dispose(): void {\n    this.disposables.forEach((d) => d.dispose());\n    this.disposables.length = 0;\n  }\n}\n\nexport class Slave {\n  private _onReadable = new EventEmitter<void>();\n  readonly onReadable = this._onReadable.register;\n\n  private _onWritable = new EventEmitter<void>();\n  readonly onWritable = this._onWritable.register;\n\n  private _onSignal = new EventEmitter<Signal>();\n  readonly onSignal = this._onSignal.register;\n\n  private fromLdiscToUpperBuffer: number[] = [];\n  private fromUpperToLdiscBuffer: number[] = [];\n\n  private winsize: [number, number] = [80, 24];\n\n  constructor(private ldisc: LineDiscipline) {\n    this.ldisc.onWriteToUpper((buf) => {\n      this.fromLdiscToUpperBuffer.push(...buf);\n      this._onReadable.fire();\n    });\n\n    this.ldisc.onFlowActivated(() => {\n      if (this.fromUpperToLdiscBuffer.length >= 1) {\n        this.ldisc.writeFromUpper(this.fromUpperToLdiscBuffer);\n        this.fromUpperToLdiscBuffer.length = 0;\n      }\n    });\n\n    this.ldisc.onSignalToUpper((sig) => {\n      this._onSignal.fire(sig);\n    });\n  }\n\n  initFromMaster() {\n    return {\n      notifyWritable: () => this._onWritable.fire(),\n      notifyResize: (rows: number, cols: number) => {\n        this.winsize = [cols, rows];\n        this._onSignal.fire(\"SIGWINCH\");\n      },\n    };\n  }\n\n  get readable() {\n    return this.fromLdiscToUpperBuffer.length >= 1;\n  }\n\n  read(length?: number) {\n    const len =\n      typeof length !== \"undefined\"\n        ? Math.min(this.fromLdiscToUpperBuffer.length, length)\n        : this.fromLdiscToUpperBuffer.length;\n    return this.fromLdiscToUpperBuffer.splice(0, len);\n  }\n\n  get writable() {\n    return this.fromUpperToLdiscBuffer.length <= bufferLimit;\n  }\n\n  write(arg: string | number[]) {\n    const buf = typeof arg == \"string\" ? stringToUtf8Bytes(arg) : arg;\n    this.fromUpperToLdiscBuffer = this.fromUpperToLdiscBuffer.concat(buf);\n\n    if (this.ldisc.flow) {\n      this.ldisc.writeFromUpper(this.fromUpperToLdiscBuffer);\n      this.fromUpperToLdiscBuffer.length = 0;\n    }\n  }\n\n  ioctl(req: \"TCGETS\"): Termios;\n  ioctl(req: \"TCSETS\", arg: TermiosConfig): void;\n  ioctl(req: \"TIOCGWINSZ\"): [number, number];\n  ioctl(req: \"TCGETS\" | \"TCSETS\" | \"TIOCGWINSZ\", arg?: any) {\n    switch (req) {\n      case \"TCGETS\":\n        return this.ldisc.termios.clone();\n      case \"TCSETS\":\n        this.ldisc.termios = Termios.fromConfig(arg);\n        return;\n      case \"TIOCGWINSZ\":\n        return this.winsize.slice();\n    }\n  }\n}\n\nexport const openpty = () => {\n  const ldisc = new LineDiscipline();\n  const slave = new Slave(ldisc);\n  const master = new Master(ldisc, slave);\n  return { master, slave };\n};\n","import { Termios } from \"../termios\";\n\n// Request types from a emscripten'ed process\nexport type TtyRequest =\n  | { ttyRequestType: \"read\"; length: number }\n  | { ttyRequestType: \"write\"; buf: number[] }\n  | { ttyRequestType: \"input\" }\n  | { ttyRequestType: \"output\"; char: number }\n  | { ttyRequestType: \"poll\"; timeout: number }\n  | { ttyRequestType: \"tcgets\" }\n  | { ttyRequestType: \"tcsets\"; data: number[] }\n  | { ttyRequestType: \"tiocgwinsz\" };\n\nexport const termiosToData = (termios: Termios) => {\n\tconst data = [termios.iflag, termios.oflag, termios.cflag, termios.lflag];\n\tlet word = 0;\n\tlet offset = 8;\n\tfor (let i = 0; i < termios.cc.length; i++) {\n\t  word |= termios.cc[i] << offset;\n\t  offset += 8;\n\t  if (offset == 32) {\n\t\tdata.push(word);\n\t\tword = 0;\n\t\toffset = 0;\n\t  }\n\t}\n\tdata.push(word);\n\treturn data;\n  };\n\n  export const dataToTermios = (data: number[]): Termios => {\n\tconst cc: number[] = [];\n\tlet ptr = 4;\n\tlet word = data[ptr++];\n\tlet offset = 8;\n\tfor (let i = 0; i < 32; i++) {\n\t  cc.push((word >> offset) & 0xff);\n\t  offset += 8;\n\t  if (offset >= 32) {\n\t\tword = data[ptr++];\n\t\toffset = 0;\n\t  }\n\t}\n\treturn new Termios(data[0], data[1], data[2], data[3], cc);\n  };\n","// This module provides a \"TtyClient\" class.\n//\n// This code runs in a Web Worker thread.\n// It sends TTY requests to TtyServer that works in the main thread.\n// The communication is based on Worker.postmessage and SharedArrayBuffer.\n\nimport { Termios } from \"../termios\";\nimport { TtyRequest, dataToTermios, termiosToData } from \"./termiosData\";\n\nexport class TtyClient {\n  private streamCtrl: Int32Array;\n  private streamData: Int32Array;\n\n  constructor(shared: SharedArrayBuffer) {\n    this.streamCtrl = new Int32Array(shared, 0, 1);\n    this.streamData = new Int32Array(shared, 4);\n  }\n\n  private req(r: TtyRequest) {\n    this.streamCtrl[0] = 0;\n    self.postMessage(r);\n    Atomics.wait(this.streamCtrl, 0, 0);\n  }\n\n  onRead(length: number | undefined) {\n    if (!length) length = this.streamData.length - 1;\n    this.req({ ttyRequestType: \"read\", length });\n    const len = this.streamData[0];\n    return Array.from(this.streamData.slice(1, len + 1));\n  }\n\n  onWrite(buf: number[]) {\n    this.req({ ttyRequestType: \"write\", buf });\n  }\n\n  onWaitForReadable(timeout: number) {\n    this.req({ ttyRequestType: \"poll\", timeout });\n    return this.streamData[0] == 1;\n  }\n\n  onIoctlTcgets() {\n    this.req({ ttyRequestType: \"tcgets\" });\n    return dataToTermios(Array.from(this.streamData.slice(0, 13)));\n  }\n\n  onIoctlTcsets(termios: Termios) {\n    const data = termiosToData(termios);\n    this.req({ ttyRequestType: \"tcsets\", data });\n  }\n\n  onIoctlTiocgwinsz() {\n    this.req({ ttyRequestType: \"tiocgwinsz\" });\n    return [this.streamData[0], this.streamData[1]];\n  }\n}\n","// This module provides a \"TtyServer\" class.\n//\n// This code runs in the main thread.\n// It accepts TTY requests from TtyClient that works in a Web Worker.\n// The communication is based on Worker.postmessage and SharedArrayBuffer.\n\nimport { Slave } from \"../pty\";\nimport { TtyRequest, dataToTermios, termiosToData } from \"./termiosData\";\n\ntype State = \"idle\" | \"input\" | \"poll\";\n\n// UI thread side\nexport class TtyServer {\n  private shared = new SharedArrayBuffer(4 + 256);\n  private streamCtrl = new Int32Array(this.shared, 0, 1);\n  private streamData = new Int32Array(this.shared, 4);\n\n  private state: State = \"idle\";\n  private timeoutHandler: NodeJS.Timeout | null = null;\n\n  ack() {\n    Atomics.store(this.streamCtrl, 0, 1);\n    Atomics.notify(this.streamCtrl, 0);\n    this.state = \"idle\";\n  }\n\n  fromWorkerBuf: number[] = [];\n  toWorkerBuf: number[] = [];\n\n  constructor(private slave: Slave) {\n    slave.onWritable(() => {\n      if (this.fromWorkerBuf.length >= 1) this.feedFromWorker();\n    });\n\n    slave.onReadable(() => {\n      this.toWorkerBuf.push(...slave.read());\n\n      switch (this.state) {\n        case \"poll\":\n          this.waitForReadable(0);\n          break;\n        case \"input\":\n          this.feedToWorker(this.toWorkerBuf.length);\n          break;\n      }\n    });\n\n    slave.onSignal((sig) => {\n      console.info(`A signal ${sig} is currently ignored`);\n      // TODO: send a signal to the Emscripten'ed process\n    });\n  }\n\n  feedToWorker(length: number) {\n    if (this.state != \"input\") throw \"worker does not wait for input\";\n    if (length > this.streamData.length - 1)\n      length = this.streamData.length - 1;\n    const buf = this.toWorkerBuf.splice(0, length);\n    this.streamData[0] = buf.length;\n    this.streamData.set(buf, 1);\n    this.ack();\n  }\n\n  feedFromWorker() {\n    if (this.fromWorkerBuf.length == 0) throw \"worker does not wait for output\";\n    if (this.slave.writable) {\n      this.ack();\n      this.slave.write(this.fromWorkerBuf.splice(0));\n    }\n  }\n\n  waitForReadable(timeout: number) {\n    if (this.state != \"poll\") throw \"worker does not wait for poll\";\n\n    if (this.timeoutHandler) {\n      clearTimeout(this.timeoutHandler);\n      this.timeoutHandler = null;\n    }\n\n    if (this.toWorkerBuf.length > 0) {\n      this.streamData[0] = 1; // ready for reading\n      this.ack();\n    } else {\n      if (timeout < 0) {\n        // block indefinitely\n      } else if (timeout > 0) {\n        // block with timeout\n        this.timeoutHandler = setTimeout(\n          () => this.waitForReadable(0),\n          timeout * 1000\n        );\n      } else {\n        this.streamData[0] = 2; // timeout\n        this.ack();\n      }\n    }\n  }\n\n  private stop_: (() => void) | null = null;\n\n  start(worker: Worker, callback?: (ev: MessageEvent<any>) => void) {\n    this.stop();\n    let stop = false;\n    this.stop_ = () => (stop = true);\n\n    worker.onmessage = (ev: MessageEvent<any>) => {\n      const req_ = ev.data;\n\n      if (typeof req_ == \"object\" && req_.ttyRequestType) {\n        if (stop) return;\n\n        const req: TtyRequest = req_;\n\n        //console.debug(req);\n\n        switch (req.ttyRequestType) {\n          case \"read\":\n            this.state = \"input\";\n            if (this.toWorkerBuf.length >= 1) this.feedToWorker(req.length);\n            break;\n          case \"write\":\n            this.fromWorkerBuf.push(...req.buf);\n            this.feedFromWorker();\n            break;\n          case \"poll\":\n            this.state = \"poll\";\n            this.waitForReadable(req.timeout);\n            break;\n          case \"tcgets\":\n            this.streamData.set(termiosToData(this.slave.ioctl(\"TCGETS\")));\n            this.ack();\n            break;\n          case \"tcsets\":\n            this.slave.ioctl(\"TCSETS\", dataToTermios(req.data));\n            this.ack();\n            break;\n          case \"tiocgwinsz\": {\n            const [rows, cols] = this.slave.ioctl(\"TIOCGWINSZ\");\n            this.streamData[0] = rows;\n            this.streamData[1] = cols;\n            this.ack();\n            break;\n          }\n        }\n      } else if (callback) {\n        callback(ev);\n      }\n    };\n\n    // kick the Web Worker\n    worker.postMessage(this.shared);\n  }\n\n  stop() {\n    if (this.stop_) this.stop_();\n  }\n}\n"]}