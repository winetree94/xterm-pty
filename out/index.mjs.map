{"version":3,"sources":["../src/eventEmitter.ts","../src/utils.ts","../src/termios.ts","../src/lineDiscipline.ts","../src/pty.ts","../src/client-server/termiosData.ts","../src/client-server/ttyClient.ts","../src/client-server/ttyServer.ts"],"sourcesContent":["type Listener<T> = (arg: T) => void;\nexport type Event<T> = (listener: Listener<T>) => { dispose: () => void };\n\nexport class EventEmitter<T> {\n  private listeners = new Set<Listener<T>>();\n\n  private _register(listener: Listener<T>) {\n    this.listeners.add(listener);\n    return {\n      dispose: () => {\n        this.listeners.delete(listener);\n      }\n    };\n  }\n\n  register = this._register.bind(this);\n\n  public fire(arg: T): void {\n    for (const listener of this.listeners) {\n      try {\n        listener(arg);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  }\n}\n","export const BS = 8;\nexport const TAB = 9;\nexport const NL = 10;\nexport const CR = 13;\nexport const SP = 32;\n\nexport const isalnum = (c: number) =>\n  (0x30 <= c && c <= 0x39) ||\n  (0x41 <= c && c <= 0x5a) ||\n  c == 0x5f ||\n  (0x61 <= c && c <= 0x7a);\nexport const iscntrl = (c: number) =>\n  (0x00 <= c && c <= 0x1f && c != 0x09) || c == 0x7f;\nexport const isUtf8ContinuationByte = (c: number) => (c & 0xc0) == 0x80;\nexport const tolower = (c: number) => (0x41 <= c && c <= 0x5a ? c + 0x20 : c);\nexport const toupper = (c: number) => (0x61 <= c && c <= 0x7a ? c - 0x20 : c);\n\nconst utf8Encoder = new TextEncoder();\n\nexport const stringToUtf8Bytes = (str: string) =>\n  Array.from(utf8Encoder.encode(str));\n","// This module provides a Termios class for termios struct data.\n//\n// https://man7.org/linux/man-pages/man3/termios.3.html\n\nexport const enum Flags {\n  // c_iflag\n  ISTRIP = 0x0020,\n  INLCR = 0x0040,\n  IGNCR = 0x0080,\n  ICRNL = 0x0100,\n  IUCLC = 0x0200,\n  IXON = 0x0400,\n  IXANY = 0x0800,\n  IMAXBEL = 0x2000,\n  IUTF8 = 0x4000,\n\n  // c_oflag\n  OPOST = 0x0001,\n  OLCUC = 0x0002,\n  ONLCR = 0x0004,\n  OCRNL = 0x0008,\n  ONOCR = 0x0010,\n  ONLRET = 0x0020,\n  TABDLY = 0x1800,\n  XTABS = 0x1800,\n\n  // c_lflag\n  ISIG = 0x0001,\n  ICANON = 0x0002,\n  ECHO = 0x0008,\n  ECHOE = 0x0010,\n  ECHOK = 0x0020,\n  ECHONL = 0x0040,\n  NOFLSH = 0x0080,\n  ECHOCTL = 0x0200,\n  ECHOPRT = 0x0400,\n  ECHOKE = 0x0800,\n  IEXTEN = 0x8000,\n\n  // c_cc\n  VINTR = 0,\n  VQUIT = 1,\n  VERASE = 2,\n  VKILL = 3,\n  VEOF = 4,\n  VTIME = 5,\n  VMIN = 6,\n  VSWTCH = 7,\n  VSTART = 8,\n  VSTOP = 9,\n  VSUSP = 10,\n  VEOL = 11,\n  VREPRINT = 12,\n  VDISCARD = 13,\n  VWERASE = 14,\n  VLNEXT = 15,\n  VEOL2 = 16\n}\n\nexport interface TermiosConfig {\n  readonly iflag: number;\n  readonly oflag: number;\n  readonly cflag: number;\n  readonly lflag: number;\n  readonly cc: ReadonlyArray<number>;\n}\n\nexport class Termios implements TermiosConfig {\n  readonly ISTRIP_P: boolean;\n  readonly INLCR_P: boolean;\n  readonly IGNCR_P: boolean;\n  readonly ICRNL_P: boolean;\n  readonly IUCLC_P: boolean;\n  readonly IXON_P: boolean;\n  readonly IXANY_P: boolean;\n  readonly IUTF8_P: boolean;\n  readonly OPOST_P: boolean;\n  readonly OLCUC_P: boolean;\n  readonly ONLCR_P: boolean;\n  readonly OCRNL_P: boolean;\n  readonly ONOCR_P: boolean;\n  readonly ONLRET_P: boolean;\n  readonly TABDLY_XTABS_P: boolean;\n  readonly ISIG_P: boolean;\n  readonly ICANON_P: boolean;\n  readonly ECHO_P: boolean;\n  readonly ECHOE_P: boolean;\n  readonly ECHOK_P: boolean;\n  readonly ECHONL_P: boolean;\n  readonly NOFLSH_P: boolean;\n  readonly ECHOCTL_P: boolean;\n  readonly ECHOPRT_P: boolean;\n  readonly ECHOKE_P: boolean;\n  readonly IEXTEN_P: boolean;\n\n  readonly INTR_V: number;\n  readonly QUIT_V: number;\n  readonly ERASE_V: number;\n  readonly KILL_V: number;\n  readonly EOF_V: number;\n  readonly TIME_V: number;\n  readonly MIN_V: number;\n  readonly SWTCH_V: number;\n  readonly START_V: number;\n  readonly STOP_V: number;\n  readonly SUSP_V: number;\n  readonly EOL_V: number;\n  readonly REPRINT_V: number;\n  readonly DISCARD_V: number;\n  readonly WERASE_V: number;\n  readonly LNEXT_V: number;\n  readonly EOL2_V: number;\n\n  constructor(\n    readonly iflag: number,\n    readonly oflag: number,\n    readonly cflag: number,\n    readonly lflag: number,\n    readonly cc: ReadonlyArray<number>\n  ) {\n    this.ISTRIP_P = (this.iflag & Flags.ISTRIP) != 0;\n    this.INLCR_P = (this.iflag & Flags.INLCR) != 0;\n    this.IGNCR_P = (this.iflag & Flags.IGNCR) != 0;\n    this.ICRNL_P = (this.iflag & Flags.ICRNL) != 0;\n    this.IUCLC_P = (this.iflag & Flags.IUCLC) != 0;\n    this.IXON_P = (this.iflag & Flags.IXON) != 0;\n    this.IXANY_P = (this.iflag & Flags.IXANY) != 0;\n    this.IUTF8_P = (this.iflag & Flags.IUTF8) != 0;\n    this.OPOST_P = (this.oflag & Flags.OPOST) != 0;\n    this.OLCUC_P = (this.oflag & Flags.OLCUC) != 0;\n    this.ONLCR_P = (this.oflag & Flags.ONLCR) != 0;\n    this.OCRNL_P = (this.oflag & Flags.OCRNL) != 0;\n    this.ONOCR_P = (this.oflag & Flags.ONOCR) != 0;\n    this.ONLRET_P = (this.oflag & Flags.ONLRET) != 0;\n    this.TABDLY_XTABS_P = (this.oflag & Flags.TABDLY) == Flags.XTABS;\n    this.ISIG_P = (this.lflag & Flags.ISIG) != 0;\n    this.ICANON_P = (this.lflag & Flags.ICANON) != 0;\n    this.ECHO_P = (this.lflag & Flags.ECHO) != 0;\n    this.ECHOE_P = (this.lflag & Flags.ECHOE) != 0;\n    this.ECHOK_P = (this.lflag & Flags.ECHOK) != 0;\n    this.ECHONL_P = (this.lflag & Flags.ECHONL) != 0;\n    this.NOFLSH_P = (this.lflag & Flags.NOFLSH) != 0;\n    this.ECHOCTL_P = (this.lflag & Flags.ECHOCTL) != 0;\n    this.ECHOPRT_P = (this.lflag & Flags.ECHOPRT) != 0;\n    this.ECHOKE_P = (this.lflag & Flags.ECHOKE) != 0;\n    this.IEXTEN_P = (this.lflag & Flags.IEXTEN) != 0;\n\n    this.INTR_V = this.cc[Flags.VINTR];\n    this.QUIT_V = this.cc[Flags.VQUIT];\n    this.ERASE_V = this.cc[Flags.VERASE];\n    this.KILL_V = this.cc[Flags.VKILL];\n    this.EOF_V = this.cc[Flags.VEOF];\n    this.TIME_V = this.cc[Flags.VTIME];\n    this.MIN_V = this.cc[Flags.VMIN];\n    this.SWTCH_V = this.cc[Flags.VSWTCH];\n    this.START_V = this.cc[Flags.VSTART];\n    this.STOP_V = this.cc[Flags.VSTOP];\n    this.SUSP_V = this.cc[Flags.VSUSP];\n    this.EOL_V = this.cc[Flags.VEOL];\n    this.REPRINT_V = this.cc[Flags.VREPRINT];\n    this.DISCARD_V = this.cc[Flags.VDISCARD];\n    this.WERASE_V = this.cc[Flags.VWERASE];\n    this.LNEXT_V = this.cc[Flags.VLNEXT];\n    this.EOL2_V = this.cc[Flags.VEOL2];\n  }\n\n  static fromConfig(config: TermiosConfig) {\n    return new Termios(\n      config.iflag,\n      config.oflag,\n      config.cflag,\n      config.lflag,\n      config.cc\n    );\n  }\n\n  clone() {\n    return Termios.fromConfig(this);\n  }\n}\n\nexport const defaultTermios = new Termios(\n  Flags.ICRNL | Flags.IXON | Flags.IMAXBEL | Flags.IUTF8,\n  Flags.OPOST | Flags.ONLCR,\n  0x00bf, // c_cflag is not supported\n  Flags.ISIG |\n    Flags.ICANON |\n    Flags.ECHO |\n    Flags.ECHOE |\n    Flags.ECHOK |\n    Flags.ECHOCTL |\n    Flags.ECHOKE |\n    Flags.IEXTEN,\n  [\n    0x03, 0x1c, 0x7f, 0x15, 0x04, 0x00, 0x01, 0x00, 0x11, 0x13, 0x1a, 0x00,\n    0x12, 0x0f, 0x17, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n  ]\n);\n","// This module provides LineDiscipline class.\n//\n// It glues the low-level device (e.g., xterm.js) with the high-level process\n// (e.g., JavaScript code and an Emscripten'ed process).\n//\n// It receives an input event from the lower layer (writeFromLower()).\n// Depending on the \"termios\" configuration, it handles some special characters\n// such as Ctrl+C, applies some translations to the input, echos it back to the\n// lower layers, etc. Finally it conveys the input to the upper layer\n// (onWriteToUpper() or onSignalToUpper()).\n//\n// It also receives an output event form the upper layer (writeFromUpper()).\n// Again, it applies some translation (such as replacing NL with CR+NL)\n// depending on termios. And finally it conveys the output to the lower layer\n// (onWriteToLower()).\n//\n//                +-------+\n//                | Upper | (e.g., an Emscripten'ed process)\n//                +-------+\n//                  |   ^\n// writeFromUpper() |   | onWriteToUpper() (and onSignalToUpper())\n//                  V   |\n//           +-----------------+\n//           | Line discipline |\n//           +-----------------+\n//                  |   ^\n// onWriteToLower() |   | writeFromLower()\n//                  V   |\n//                +-------+\n//                | Lower | (e.g., xterm.js)\n//                +-------+\n//\n// References:\n//\n// https://en.wikipedia.org/wiki/Line_discipline\n// https://man7.org/linux/man-pages/man3/termios.3.html\n// https://pubs.opengroup.org/onlinepubs/009695299/basedefs/xbd_chap11.html\n// https://pubs.opengroup.org/onlinepubs/009695299/utilities/stty.html\n// https://github.com/torvalds/linux/blob/master/drivers/tty/n_tty.c\n\nimport {\n  BS,\n  TAB,\n  NL,\n  CR,\n  SP,\n  isalnum,\n  iscntrl,\n  isUtf8ContinuationByte,\n  tolower,\n  toupper,\n  stringToUtf8Bytes,\n} from \"./utils\";\nimport { Signal } from \"./pty\";\nimport { Termios, defaultTermios } from \"./termios\";\nimport { EventEmitter, Event } from \"./eventEmitter\";\n\ntype KeyAction =\n  | \"normal\"\n  | \"VEOF\"\n  | \"VEOL\"\n  | \"VERASE\"\n  | \"VKILL\"\n  | \"VREPRINT\"\n  | \"VWERASE\"\n  | \"VLNEXT\"\n  | \"VSTART\"\n  | \"VSTOP\"\n  | \"VINTR\"\n  | \"VQUIT\"\n  | \"VSUSP\";\n\nexport class LineDiscipline {\n  // callbacks\n  private _onWriteToLower = new EventEmitter<number[]>();\n  readonly onWriteToLower = this._onWriteToLower.register;\n\n  private _onWriteToUpper = new EventEmitter<number[]>();\n  readonly onWriteToUpper = this._onWriteToUpper.register;\n\n  private _onSignalToUpper = new EventEmitter<Signal>();\n  readonly onSignalToUpper = this._onSignalToUpper.register;\n\n  private _onFlowActivated = new EventEmitter<void>();\n  readonly onFlowActivated = this._onFlowActivated.register;\n\n  private _onFlowDeactivated = new EventEmitter<void>();\n  readonly onFlowDeactivated = this._onFlowDeactivated.register;\n\n  // states\n  private T = defaultTermios;\n  private keyActions: KeyAction[] = new Array(256).fill(\"normal\");\n\n  private flowActivated = true; // false after VSTOP (C-s), true after VSTART (C-q)\n  private column = 0; // the column that the cursor is in\n  private baseColumn = 0; // the column that starts the to-upper buffer\n  private vlnext = false; // waiting for the next character after VLNEXT (C-v)\n  private echoprt = false; // erasing with ECHOPRT\n\n  private toLowerBuf: number[] = []; // flushed immediately every call\n  private toUpperBuf: number[] = []; // flushed after NL is input (in ICANON mode)\n\n  constructor() {\n    this.termios = defaultTermios;\n  }\n\n  private activateFlow() {\n    this.flowActivated = true;\n    this._onFlowActivated.fire();\n  }\n\n  private deactivateFlow() {\n    this.flowActivated = false;\n    this._onFlowDeactivated.fire();\n  }\n\n  get flow() {\n    return this.flowActivated;\n  }\n\n  get termios() {\n    return this.T;\n  }\n\n  set termios(T: Termios) {\n    this.T = T;\n\n    const keyActions: KeyAction[] = new Array(256).fill(\"normal\");\n\n    if (T.ICANON_P) {\n      keyActions[T.EOF_V] = \"VEOF\";\n      keyActions[T.EOL_V] = \"VEOL\";\n      keyActions[T.EOL2_V] = \"VEOL\";\n      keyActions[T.ERASE_V] = \"VERASE\";\n      keyActions[T.KILL_V] = \"VKILL\";\n      if (T.IEXTEN_P) {\n        keyActions[T.REPRINT_V] = \"VREPRINT\";\n        keyActions[T.WERASE_V] = \"VWERASE\";\n      }\n    }\n    if (T.IEXTEN_P) {\n      keyActions[T.LNEXT_V] = \"VLNEXT\";\n    }\n    if (T.IXON_P) {\n      keyActions[T.START_V] = \"VSTART\";\n      keyActions[T.STOP_V] = \"VSTOP\";\n    }\n    if (T.ISIG_P) {\n      keyActions[T.INTR_V] = \"VINTR\";\n      keyActions[T.QUIT_V] = \"VQUIT\";\n      keyActions[T.SUSP_V] = \"VSUSP\";\n    }\n    keyActions[0] = \"normal\"; // Ignore any action for NUL character\n\n    this.keyActions = keyActions;\n\n    if (!this.T.IXON_P) {\n      this.activateFlow();\n      this.flushToLower();\n    }\n  }\n\n  private clearToLower() {\n    this.toLowerBuf.length = 0;\n  }\n\n  private flushToLower() {\n    if (this.flowActivated == false) return;\n    this._onWriteToLower.fire(this.toLowerBuf);\n    this.clearToLower();\n  }\n\n  private outputToLower(buf: number[]) {\n    this.toLowerBuf.push(...buf);\n  }\n\n  private updateBaseColumn() {\n    if (this.toUpperBuf.length == 0) {\n      this.baseColumn = this.column;\n    }\n  }\n\n  private clearToUpper() {\n    this.toUpperBuf.length = 0;\n    this.updateBaseColumn();\n  }\n\n  private flushToUpper() {\n    this._onWriteToUpper.fire(this.toUpperBuf);\n    this.clearToUpper();\n  }\n\n  private outputToUpper(c: number) {\n    this.toUpperBuf.push(c);\n  }\n\n  private outputToLowerWithPostprocess(c: number) {\n    if (this.T.OPOST_P) {\n      switch (c) {\n        case BS:\n          if (this.column > 0) this.column--;\n          this.outputToLower([BS]);\n          break;\n        case TAB: {\n          const spaces = 8 - (this.column % 8);\n          this.column += spaces;\n          this.outputToLower(\n            this.T.TABDLY_XTABS_P ? new Array(spaces).fill(SP) : [TAB]\n          );\n          break;\n        }\n        case NL:\n          if (this.T.ONLCR_P) {\n            this.baseColumn = this.column = 0;\n            this.outputToLower([CR, NL]);\n          } else if (this.T.ONLRET_P) {\n            this.column = 0;\n            this.outputToLower([NL]);\n          } else {\n            this.baseColumn = this.column;\n            this.outputToLower([NL]);\n          }\n          break;\n        case CR:\n          if (this.T.ONOCR_P && this.column == 0) {\n            // nothing printed\n          } else if (this.T.OCRNL_P) {\n            if (this.T.ONLRET_P) this.baseColumn = this.column = 0;\n            this.outputToLower([NL]);\n          } else {\n            this.baseColumn = this.column = 0;\n            this.outputToLower([CR]);\n          }\n          break;\n        default:\n          if (!(this.T.IUTF8_P && isUtf8ContinuationByte(c))) this.column++;\n          this.outputToLower(this.T.OLCUC_P ? [toupper(c)] : [c]);\n          break;\n      }\n    } else {\n      this.outputToLower([c]);\n    }\n  }\n\n  private echoToLower(chars: number | number[], raw?: boolean) {\n    if (typeof chars == \"number\") chars = [chars];\n\n    for (const c of chars) {\n      if (this.T.ECHOCTL_P && iscntrl(c) && c != TAB && !raw) {\n        this.outputToLower([94 /* '^' */, c ^ 0x40]);\n        this.column += 2;\n      } else {\n        this.outputToLowerWithPostprocess(c);\n      }\n    }\n  }\n\n  private inputFromLowerWithPreprocess(c: number) {\n    if (c == CR) {\n      if (this.T.IGNCR_P) return;\n      if (this.T.ICRNL_P) c = NL;\n    } else if (c == NL && this.T.INLCR_P) {\n      c = CR;\n    }\n\n    if (this.T.ICANON_P && c == NL) {\n      // flush the to-upper buffer\n      if (this.T.ECHO_P || this.T.ECHONL_P) {\n        this.echoToLower(NL, true);\n        this.flushToLower();\n      }\n      this.outputToUpper(NL);\n      this.flushToUpper();\n    } else if (this.T.ECHO_P) {\n      this.finishECHOPRT();\n      this.updateBaseColumn();\n      if (c == NL) {\n        this.echoToLower(NL, true);\n      } else {\n        this.echoToLower(c);\n      }\n      this.flushToLower();\n      this.outputToUpper(c);\n    } else {\n      this.outputToUpper(c);\n    }\n    // writeFromLower will flush the to-upper buffer later\n  }\n\n  private erase(type: \"VERASE\" | \"VWERASE\" | \"VKILL\") {\n    if (this.toUpperBuf.length == 0) return;\n\n    if (type == \"VKILL\") {\n      if (!this.T.ECHO_P) {\n        this.clearToUpper();\n        return;\n      }\n      if (!this.T.ECHOK_P || !this.T.ECHOKE_P || !this.T.ECHOE_P) {\n        this.clearToUpper();\n        this.finishECHOPRT();\n        this.echoToLower(this.T.KILL_V);\n        if (this.T.ECHOK_P) this.echoToLower(NL, true);\n        return;\n      }\n    }\n\n    let alnumsFound = false;\n    for (let idx = this.toUpperBuf.length - 1; idx >= 0; idx--) {\n      const c = this.toUpperBuf[idx];\n      if (this.T.IUTF8_P && isUtf8ContinuationByte(c)) continue;\n\n      if (type == \"VWERASE\") {\n        if (isalnum(c) || c == 0x5f /* '_' */) {\n          alnumsFound = true;\n        } else if (alnumsFound) break;\n      }\n\n      const removedChar = this.toUpperBuf.splice(idx);\n      if (this.T.ECHO_P) {\n        if (this.T.ECHOPRT_P) {\n          this.startECHOPRT();\n          this.echoToLower(removedChar);\n        } else if (type == \"VERASE\" && !this.T.ECHOE_P) {\n          this.echoToLower(this.T.ERASE_V);\n        } else if (c == TAB) {\n          let count = 0;\n          let tabFound = false;\n\n          for (let idx = this.toUpperBuf.length - 1; idx >= 0; idx--) {\n            const c = this.toUpperBuf[idx];\n            if (c == TAB) {\n              tabFound = true;\n              break;\n            } else if (iscntrl(c)) {\n              if (this.T.ECHOCTL_P) count += 2;\n            } else if (this.T.IUTF8_P && isUtf8ContinuationByte(c)) {\n              // ignore\n            } else {\n              count++;\n            }\n          }\n          if (!tabFound) count += this.baseColumn;\n\n          count = 8 - (count % 8);\n          this.outputToLower(new Array(count).fill(BS));\n          this.column = Math.max(0, this.column - count);\n        } else {\n          if (iscntrl(c) && this.T.ECHOCTL_P) {\n            this.echoToLower([BS, SP, BS], true);\n          }\n          if (!iscntrl(c) || this.T.ECHOCTL_P) {\n            // delete '^' of ECHOCTL\n            this.echoToLower([BS, SP, BS], true);\n          }\n        }\n      }\n      if (type == \"VERASE\") break;\n    }\n    if (this.toUpperBuf.length == 0) {\n      this.clearToUpper();\n      if (this.T.ECHO_P) this.finishECHOPRT();\n    }\n  }\n\n  private startECHOPRT() {\n    if (!this.echoprt) {\n      this.echoToLower(92 /* '\\' */, true);\n      this.echoprt = true;\n    }\n  }\n\n  private finishECHOPRT() {\n    if (this.echoprt) {\n      this.echoToLower(47 /* '/' */, true);\n      this.echoprt = false;\n    }\n  }\n\n  private signal(sig: Signal, c: number) {\n    this._onSignalToUpper.fire(sig);\n    if (!this.T.NOFLSH_P) {\n      this.clearToLower();\n      this.clearToUpper();\n    }\n    if (this.T.IXON_P) this.activateFlow();\n    if (this.T.ECHO_P) this.echoToLower(c);\n    this.flushToLower();\n  }\n\n  private checkStartFlow() {\n    if (this.flowActivated == false && this.T.IXON_P && this.T.IXANY_P) {\n      this.activateFlow();\n      this.flushToLower();\n    }\n  }\n\n  private nextLiteral() {\n    this.vlnext = true;\n    if (this.T.ECHO_P) {\n      this.finishECHOPRT();\n      if (this.T.ECHOCTL_P) {\n        this.echoToLower([94 /* '^' */, BS], true);\n        this.flushToLower();\n      }\n    }\n  }\n\n  private reprint() {\n    this.finishECHOPRT();\n    this.echoToLower(this.T.REPRINT_V);\n    this.echoToLower(NL, true);\n    this.echoToLower(this.toUpperBuf);\n  }\n\n  writeFromLower(arg: number[] | string) {\n    const buf = typeof arg == \"string\" ? stringToUtf8Bytes(arg) : arg;\n\n    for (let c of buf) {\n      if (this.T.ISTRIP_P) c &= 0x7f;\n      if (this.T.IUCLC_P && this.T.IEXTEN_P) c = tolower(c);\n\n      const keyAction = this.vlnext ? \"normal\" : this.keyActions[c];\n      this.vlnext = false;\n\n      switch (keyAction) {\n        case \"normal\":\n          this.checkStartFlow();\n          this.inputFromLowerWithPreprocess(c);\n          break;\n        case \"VERASE\":\n        case \"VWERASE\":\n        case \"VKILL\":\n          this.checkStartFlow();\n          this.erase(keyAction);\n          this.flushToLower();\n          break;\n        case \"VEOF\":\n          this.checkStartFlow();\n          this.flushToUpper();\n          break;\n        case \"VEOL\":\n          this.checkStartFlow();\n          if (this.T.ECHO_P) {\n            this.echoToLower(c);\n            this.flushToLower();\n          }\n          this.outputToUpper(c);\n          this.flushToUpper();\n          break;\n        case \"VLNEXT\":\n          this.checkStartFlow();\n          this.nextLiteral();\n          break;\n        case \"VREPRINT\":\n          this.checkStartFlow();\n          this.reprint();\n          this.flushToLower();\n          break;\n        case \"VSTART\":\n          this.activateFlow();\n          this.flushToLower();\n          break;\n        case \"VSTOP\":\n          this.deactivateFlow();\n          break;\n        case \"VINTR\":\n          this.signal(\"SIGINT\", c);\n          break;\n        case \"VQUIT\":\n          this.signal(\"SIGQUIT\", c);\n          break;\n        case \"VSUSP\":\n          this.signal(\"SIGTSTP\", c);\n          break;\n      }\n    }\n\n    if (!this.T.ICANON_P) {\n      this.flushToUpper();\n    }\n  }\n\n  writeFromUpper(arg: number[] | string) {\n    if (this.flowActivated == false) {\n      throw \"Do not write anything during flowStatus is stopped\";\n    }\n\n    const buf = typeof arg == \"string\" ? stringToUtf8Bytes(arg) : arg;\n\n    for (const c of buf) this.outputToLowerWithPostprocess(c);\n    this.flushToLower();\n  }\n}\n\nexport interface LineDiscipline {\n  readonly onWriteToLower: Event<number[]>;\n  readonly onWriteToUpper: Event<number[]>;\n  readonly onSignalToUpper: Event<Signal>;\n  readonly onFlowActivated: Event<void>;\n  readonly onFlowDeactivated: Event<void>;\n  flow: boolean;\n  termios: Termios;\n  writeFromLower: (arg: number[] | string) => void;\n  writeFromUpper: (arg: number[] | string) => void;\n}\n","// This module provides the \"openpty\" function.\n// It returns a master object, which is an addon for xterm.js, and a slave\n// object, which serves as stdin/stdout for a process.\n//\n// Typical usage:\n//\n//   // Start an xterm.js instance\n//   const xterm = new Terminal();\n//\n//   // Create master/slave objects\n//   const { master, slave } = openpty();\n//\n//   // Connect the master object to xterm.js\n//   xterm.loadAddon(ldiscAddon);\n//\n//   // Use slave.write instead of xterm.write\n//   slave.write(\"Hello, world!\\nInput your name:\");\n//\n//   // Use slave.onReadable and slave.read instead of xterm.onData\n//   slave.onReadable(() => {\n//     xterm.write(`Hi, ${ slave.read().trim() }!\\n`);\n//   });\n\nimport { Terminal, ITerminalAddon, IDisposable } from \"xterm\";\nimport { EventEmitter } from \"./eventEmitter\";\nimport { LineDiscipline } from \"./lineDiscipline\";\nimport { Termios, TermiosConfig } from \"./termios\";\nimport { stringToUtf8Bytes } from \"./utils\";\n\nexport type Signal = \"SIGINT\" | \"SIGQUIT\" | \"SIGTSTP\" | \"SIGWINCH\";\n\nconst bufferLimit = 4096;\n\nclass Master implements ITerminalAddon {\n  private disposables: IDisposable[] = [];\n\n  private _onWrite = new EventEmitter<[Uint8Array, () => void]>();\n  readonly onWrite = this._onWrite.register;\n\n  private fromLdiscToLowerBuffer: number[] = [];\n  private waitingForLower = false; // xterm.js implements buffering\n\n  private notifyWritable;\n  private notifyResize;\n\n  constructor(private ldisc: LineDiscipline, private slave: Slave) {\n    const flushToLower = () => {\n      if (this.fromLdiscToLowerBuffer.length >= 1) {\n        this.waitingForLower = true;\n\n        const buf = new Uint8Array(this.fromLdiscToLowerBuffer.splice(0, 4096));\n\n        if (this.fromLdiscToLowerBuffer.length <= bufferLimit)\n          this.notifyWritable();\n\n        this._onWrite.fire([buf, flushToLower]);\n      } else {\n        this.waitingForLower = false;\n      }\n    };\n\n    this.ldisc.onWriteToLower((buf) => {\n      this.fromLdiscToLowerBuffer.push(...buf);\n      if (!this.waitingForLower) flushToLower();\n    });\n\n    const { notifyWritable, notifyResize } = slave.initFromMaster();\n    this.notifyWritable = notifyWritable;\n    this.notifyResize = notifyResize;\n  }\n\n  activate(xterm: Terminal) {\n    this.onWrite(([buf, callback]) => xterm.write(buf, callback));\n\n    const onData = (str: string) => this.ldisc.writeFromLower(str);\n\n    this.disposables.push(\n      xterm.onData(onData),\n      xterm.onBinary(onData),\n      xterm.onResize(({ cols, rows }) => this.notifyResize(rows, cols))\n    );\n  }\n\n  dispose(): void {\n    this.disposables.forEach((d) => d.dispose());\n    this.disposables.length = 0;\n  }\n}\n\nexport class Slave {\n  private _onReadable = new EventEmitter<void>();\n  readonly onReadable = this._onReadable.register;\n\n  private _onWritable = new EventEmitter<void>();\n  readonly onWritable = this._onWritable.register;\n\n  private _onSignal = new EventEmitter<Signal>();\n  readonly onSignal = this._onSignal.register;\n\n  private fromLdiscToUpperBuffer: number[] = [];\n  private fromUpperToLdiscBuffer: number[] = [];\n\n  private winsize: [number, number] = [80, 24];\n\n  constructor(private ldisc: LineDiscipline) {\n    this.ldisc.onWriteToUpper((buf) => {\n      this.fromLdiscToUpperBuffer.push(...buf);\n      this._onReadable.fire();\n    });\n\n    this.ldisc.onFlowActivated(() => {\n      if (this.fromUpperToLdiscBuffer.length >= 1) {\n        this.ldisc.writeFromUpper(this.fromUpperToLdiscBuffer);\n        this.fromUpperToLdiscBuffer.length = 0;\n      }\n    });\n\n    this.ldisc.onSignalToUpper((sig) => {\n      this._onSignal.fire(sig);\n    });\n  }\n\n  initFromMaster() {\n    return {\n      notifyWritable: () => this._onWritable.fire(),\n      notifyResize: (rows: number, cols: number) => {\n        this.winsize = [cols, rows];\n        this._onSignal.fire(\"SIGWINCH\");\n      },\n    };\n  }\n\n  get readable() {\n    return this.fromLdiscToUpperBuffer.length >= 1;\n  }\n\n  read(length?: number) {\n    const len =\n      typeof length !== \"undefined\"\n        ? Math.min(this.fromLdiscToUpperBuffer.length, length)\n        : this.fromLdiscToUpperBuffer.length;\n    return this.fromLdiscToUpperBuffer.splice(0, len);\n  }\n\n  get writable() {\n    return this.fromUpperToLdiscBuffer.length <= bufferLimit;\n  }\n\n  write(arg: string | number[]) {\n    const buf = typeof arg == \"string\" ? stringToUtf8Bytes(arg) : arg;\n    this.fromUpperToLdiscBuffer = this.fromUpperToLdiscBuffer.concat(buf);\n\n    if (this.ldisc.flow) {\n      this.ldisc.writeFromUpper(this.fromUpperToLdiscBuffer);\n      this.fromUpperToLdiscBuffer.length = 0;\n    }\n  }\n\n  ioctl(req: \"TCGETS\"): Termios;\n  ioctl(req: \"TCSETS\", arg: TermiosConfig): void;\n  ioctl(req: \"TIOCGWINSZ\"): [number, number];\n  ioctl(req: \"TCGETS\" | \"TCSETS\" | \"TIOCGWINSZ\", arg?: any) {\n    switch (req) {\n      case \"TCGETS\":\n        return this.ldisc.termios.clone();\n      case \"TCSETS\":\n        this.ldisc.termios = Termios.fromConfig(arg);\n        return;\n      case \"TIOCGWINSZ\":\n        return this.winsize.slice();\n    }\n  }\n}\n\nexport const openpty = () => {\n  const ldisc = new LineDiscipline();\n  const slave = new Slave(ldisc);\n  const master = new Master(ldisc, slave);\n  return { master, slave };\n};\n","import { Termios } from \"../termios\";\n\n// Request types from a emscripten'ed process\nexport type TtyRequest =\n  | { ttyRequestType: \"read\"; length: number }\n  | { ttyRequestType: \"write\"; buf: number[] }\n  | { ttyRequestType: \"input\" }\n  | { ttyRequestType: \"output\"; char: number }\n  | { ttyRequestType: \"poll\"; timeout: number }\n  | { ttyRequestType: \"tcgets\" }\n  | { ttyRequestType: \"tcsets\"; data: number[] }\n  | { ttyRequestType: \"tiocgwinsz\" };\n\nexport const termiosToData = (termios: Termios) => {\n\tconst data = [termios.iflag, termios.oflag, termios.cflag, termios.lflag];\n\tlet word = 0;\n\tlet offset = 8;\n\tfor (let i = 0; i < termios.cc.length; i++) {\n\t  word |= termios.cc[i] << offset;\n\t  offset += 8;\n\t  if (offset == 32) {\n\t\tdata.push(word);\n\t\tword = 0;\n\t\toffset = 0;\n\t  }\n\t}\n\tdata.push(word);\n\treturn data;\n  };\n\n  export const dataToTermios = (data: number[]): Termios => {\n\tconst cc: number[] = [];\n\tlet ptr = 4;\n\tlet word = data[ptr++];\n\tlet offset = 8;\n\tfor (let i = 0; i < 32; i++) {\n\t  cc.push((word >> offset) & 0xff);\n\t  offset += 8;\n\t  if (offset >= 32) {\n\t\tword = data[ptr++];\n\t\toffset = 0;\n\t  }\n\t}\n\treturn new Termios(data[0], data[1], data[2], data[3], cc);\n  };\n","// This module provides a \"TtyClient\" class.\n//\n// This code runs in a Web Worker thread.\n// It sends TTY requests to TtyServer that works in the main thread.\n// The communication is based on Worker.postmessage and SharedArrayBuffer.\n\nimport { Termios } from \"../termios\";\nimport { TtyRequest, dataToTermios, termiosToData } from \"./termiosData\";\n\nexport class TtyClient {\n  private streamCtrl: Int32Array;\n  private streamData: Int32Array;\n\n  constructor(shared: SharedArrayBuffer) {\n    this.streamCtrl = new Int32Array(shared, 0, 1);\n    this.streamData = new Int32Array(shared, 4);\n  }\n\n  private req(r: TtyRequest) {\n    this.streamCtrl[0] = 0;\n    self.postMessage(r);\n    Atomics.wait(this.streamCtrl, 0, 0);\n  }\n\n  onRead(length: number | undefined) {\n    if (!length) length = this.streamData.length - 1;\n    this.req({ ttyRequestType: \"read\", length });\n    const len = this.streamData[0];\n    return Array.from(this.streamData.slice(1, len + 1));\n  }\n\n  onWrite(buf: number[]) {\n    this.req({ ttyRequestType: \"write\", buf });\n  }\n\n  onWaitForReadable(timeout: number) {\n    this.req({ ttyRequestType: \"poll\", timeout });\n    return this.streamData[0] == 1;\n  }\n\n  onIoctlTcgets() {\n    this.req({ ttyRequestType: \"tcgets\" });\n    return dataToTermios(Array.from(this.streamData.slice(0, 13)));\n  }\n\n  onIoctlTcsets(termios: Termios) {\n    const data = termiosToData(termios);\n    this.req({ ttyRequestType: \"tcsets\", data });\n  }\n\n  onIoctlTiocgwinsz() {\n    this.req({ ttyRequestType: \"tiocgwinsz\" });\n    return [this.streamData[0], this.streamData[1]];\n  }\n}\n","// This module provides a \"TtyServer\" class.\n//\n// This code runs in the main thread.\n// It accepts TTY requests from TtyClient that works in a Web Worker.\n// The communication is based on Worker.postmessage and SharedArrayBuffer.\n\nimport { Slave } from \"../pty\";\nimport { TtyRequest, dataToTermios, termiosToData } from \"./termiosData\";\n\ntype State = \"idle\" | \"input\" | \"poll\";\n\n// UI thread side\nexport class TtyServer {\n  private shared = new SharedArrayBuffer(4 + 256);\n  private streamCtrl = new Int32Array(this.shared, 0, 1);\n  private streamData = new Int32Array(this.shared, 4);\n\n  private state: State = \"idle\";\n  private timeoutHandler: NodeJS.Timeout | null = null;\n\n  ack() {\n    Atomics.store(this.streamCtrl, 0, 1);\n    Atomics.notify(this.streamCtrl, 0);\n    this.state = \"idle\";\n  }\n\n  fromWorkerBuf: number[] = [];\n  toWorkerBuf: number[] = [];\n\n  constructor(private slave: Slave) {\n    slave.onWritable(() => {\n      if (this.fromWorkerBuf.length >= 1) this.feedFromWorker();\n    });\n\n    slave.onReadable(() => {\n      this.toWorkerBuf.push(...slave.read());\n\n      switch (this.state) {\n        case \"poll\":\n          this.waitForReadable(0);\n          break;\n        case \"input\":\n          this.feedToWorker(this.toWorkerBuf.length);\n          break;\n      }\n    });\n\n    slave.onSignal((sig) => {\n      console.info(`A signal ${sig} is currently ignored`);\n      // TODO: send a signal to the Emscripten'ed process\n    });\n  }\n\n  feedToWorker(length: number) {\n    if (this.state != \"input\") throw \"worker does not wait for input\";\n    if (length > this.streamData.length - 1)\n      length = this.streamData.length - 1;\n    const buf = this.toWorkerBuf.splice(0, length);\n    this.streamData[0] = buf.length;\n    this.streamData.set(buf, 1);\n    this.ack();\n  }\n\n  feedFromWorker() {\n    if (this.fromWorkerBuf.length == 0) throw \"worker does not wait for output\";\n    if (this.slave.writable) {\n      this.ack();\n      this.slave.write(this.fromWorkerBuf.splice(0));\n    }\n  }\n\n  waitForReadable(timeout: number) {\n    if (this.state != \"poll\") throw \"worker does not wait for poll\";\n\n    if (this.timeoutHandler) {\n      clearTimeout(this.timeoutHandler);\n      this.timeoutHandler = null;\n    }\n\n    if (this.toWorkerBuf.length > 0) {\n      this.streamData[0] = 1; // ready for reading\n      this.ack();\n    } else {\n      if (timeout < 0) {\n        // block indefinitely\n      } else if (timeout > 0) {\n        // block with timeout\n        this.timeoutHandler = setTimeout(\n          () => this.waitForReadable(0),\n          timeout * 1000\n        );\n      } else {\n        this.streamData[0] = 2; // timeout\n        this.ack();\n      }\n    }\n  }\n\n  private stop_: (() => void) | null = null;\n\n  start(worker: Worker, callback?: (ev: MessageEvent<any>) => void) {\n    this.stop();\n    let stop = false;\n    this.stop_ = () => (stop = true);\n\n    worker.onmessage = (ev: MessageEvent<any>) => {\n      const req_ = ev.data;\n\n      if (typeof req_ == \"object\" && req_.ttyRequestType) {\n        if (stop) return;\n\n        const req: TtyRequest = req_;\n\n        //console.debug(req);\n\n        switch (req.ttyRequestType) {\n          case \"read\":\n            this.state = \"input\";\n            if (this.toWorkerBuf.length >= 1) this.feedToWorker(req.length);\n            break;\n          case \"write\":\n            this.fromWorkerBuf.push(...req.buf);\n            this.feedFromWorker();\n            break;\n          case \"poll\":\n            this.state = \"poll\";\n            this.waitForReadable(req.timeout);\n            break;\n          case \"tcgets\":\n            this.streamData.set(termiosToData(this.slave.ioctl(\"TCGETS\")));\n            this.ack();\n            break;\n          case \"tcsets\":\n            this.slave.ioctl(\"TCSETS\", dataToTermios(req.data));\n            this.ack();\n            break;\n          case \"tiocgwinsz\": {\n            const [rows, cols] = this.slave.ioctl(\"TIOCGWINSZ\");\n            this.streamData[0] = rows;\n            this.streamData[1] = cols;\n            this.ack();\n            break;\n          }\n        }\n      } else if (callback) {\n        callback(ev);\n      }\n    };\n\n    // kick the Web Worker\n    worker.postMessage(this.shared);\n  }\n\n  stop() {\n    if (this.stop_) this.stop_();\n  }\n}\n"],"mappings":";AAGO,IAAM,eAAN,MAAsB;AAAA,EAAtB;AACL,SAAQ,YAAY,oBAAI,IAAiB;AAWzC,oBAAW,KAAK,UAAU,KAAK,IAAI;AAAA;AAAA,EAT3B,UAAU,UAAuB;AACvC,SAAK,UAAU,IAAI,QAAQ;AAC3B,WAAO;AAAA,MACL,SAAS,MAAM;AACb,aAAK,UAAU,OAAO,QAAQ;AAAA,MAChC;AAAA,IACF;AAAA,EACF;AAAA,EAIO,KAAK,KAAc;AACxB,eAAW,YAAY,KAAK,WAAW;AACrC,UAAI;AACF,iBAAS,GAAG;AAAA,MACd,SAAS,GAAG;AACV,gBAAQ,MAAM,CAAC;AAAA,MACjB;AAAA,IACF;AAAA,EACF;AACF;;;AC1BO,IAAM,KAAK;AACX,IAAM,MAAM;AACZ,IAAM,KAAK;AACX,IAAM,KAAK;AACX,IAAM,KAAK;AAEX,IAAM,UAAU,CAAC,MACrB,MAAQ,KAAK,KAAK,MAClB,MAAQ,KAAK,KAAK,MACnB,KAAK,MACJ,MAAQ,KAAK,KAAK;AACd,IAAM,UAAU,CAAC,MACrB,KAAQ,KAAK,KAAK,MAAQ,KAAK,KAAS,KAAK;AACzC,IAAM,yBAAyB,CAAC,OAAe,IAAI,QAAS;AAC5D,IAAM,UAAU,CAAC,MAAe,MAAQ,KAAK,KAAK,KAAO,IAAI,KAAO;AACpE,IAAM,UAAU,CAAC,MAAe,MAAQ,KAAK,KAAK,MAAO,IAAI,KAAO;AAE3E,IAAM,cAAc,IAAI,YAAY;AAE7B,IAAM,oBAAoB,CAAC,QAChC,MAAM,KAAK,YAAY,OAAO,GAAG,CAAC;;;AChB7B,IAAW,QAAX,kBAAWA,WAAX;AAEL,EAAAA,cAAA,YAAS,MAAT;AACA,EAAAA,cAAA,WAAQ,MAAR;AACA,EAAAA,cAAA,WAAQ,OAAR;AACA,EAAAA,cAAA,WAAQ,OAAR;AACA,EAAAA,cAAA,WAAQ,OAAR;AACA,EAAAA,cAAA,UAAO,QAAP;AACA,EAAAA,cAAA,WAAQ,QAAR;AACA,EAAAA,cAAA,aAAU,QAAV;AACA,EAAAA,cAAA,WAAQ,SAAR;AAGA,EAAAA,cAAA,WAAQ,KAAR;AACA,EAAAA,cAAA,WAAQ,KAAR;AACA,EAAAA,cAAA,WAAQ,KAAR;AACA,EAAAA,cAAA,WAAQ,KAAR;AACA,EAAAA,cAAA,WAAQ,MAAR;AACA,EAAAA,cAAA,YAAS,MAAT;AACA,EAAAA,cAAA,YAAS,QAAT;AACA,EAAAA,cAAA,WAAQ,QAAR;AAGA,EAAAA,cAAA,UAAO,KAAP;AACA,EAAAA,cAAA,YAAS,KAAT;AACA,EAAAA,cAAA,UAAO,KAAP;AACA,EAAAA,cAAA,WAAQ,MAAR;AACA,EAAAA,cAAA,WAAQ,MAAR;AACA,EAAAA,cAAA,YAAS,MAAT;AACA,EAAAA,cAAA,YAAS,OAAT;AACA,EAAAA,cAAA,aAAU,OAAV;AACA,EAAAA,cAAA,aAAU,QAAV;AACA,EAAAA,cAAA,YAAS,QAAT;AACA,EAAAA,cAAA,YAAS,SAAT;AAGA,EAAAA,cAAA,WAAQ,KAAR;AACA,EAAAA,cAAA,WAAQ,KAAR;AACA,EAAAA,cAAA,YAAS,KAAT;AACA,EAAAA,cAAA,WAAQ,KAAR;AACA,EAAAA,cAAA,UAAO,KAAP;AACA,EAAAA,cAAA,WAAQ,KAAR;AACA,EAAAA,cAAA,UAAO,KAAP;AACA,EAAAA,cAAA,YAAS,KAAT;AACA,EAAAA,cAAA,YAAS,KAAT;AACA,EAAAA,cAAA,WAAQ,KAAR;AACA,EAAAA,cAAA,WAAQ,MAAR;AACA,EAAAA,cAAA,UAAO,MAAP;AACA,EAAAA,cAAA,cAAW,MAAX;AACA,EAAAA,cAAA,cAAW,MAAX;AACA,EAAAA,cAAA,aAAU,MAAV;AACA,EAAAA,cAAA,YAAS,MAAT;AACA,EAAAA,cAAA,WAAQ,MAAR;AApDgB,SAAAA;AAAA,GAAA;AA+DX,IAAM,UAAN,MAAM,SAAiC;AAAA,EA8C5C,YACW,OACA,OACA,OACA,OACA,IACT;AALS;AACA;AACA;AACA;AACA;AAET,SAAK,YAAY,KAAK,QAAQ,oBAAiB;AAC/C,SAAK,WAAW,KAAK,QAAQ,mBAAgB;AAC7C,SAAK,WAAW,KAAK,QAAQ,oBAAgB;AAC7C,SAAK,WAAW,KAAK,QAAQ,oBAAgB;AAC7C,SAAK,WAAW,KAAK,QAAQ,oBAAgB;AAC7C,SAAK,UAAU,KAAK,QAAQ,oBAAe;AAC3C,SAAK,WAAW,KAAK,QAAQ,qBAAgB;AAC7C,SAAK,WAAW,KAAK,QAAQ,sBAAgB;AAC7C,SAAK,WAAW,KAAK,QAAQ,kBAAgB;AAC7C,SAAK,WAAW,KAAK,QAAQ,kBAAgB;AAC7C,SAAK,WAAW,KAAK,QAAQ,kBAAgB;AAC7C,SAAK,WAAW,KAAK,QAAQ,kBAAgB;AAC7C,SAAK,WAAW,KAAK,QAAQ,mBAAgB;AAC7C,SAAK,YAAY,KAAK,QAAQ,oBAAiB;AAC/C,SAAK,kBAAkB,KAAK,QAAQ,sBAAiB;AACrD,SAAK,UAAU,KAAK,QAAQ,iBAAe;AAC3C,SAAK,YAAY,KAAK,QAAQ,mBAAiB;AAC/C,SAAK,UAAU,KAAK,QAAQ,iBAAe;AAC3C,SAAK,WAAW,KAAK,QAAQ,mBAAgB;AAC7C,SAAK,WAAW,KAAK,QAAQ,mBAAgB;AAC7C,SAAK,YAAY,KAAK,QAAQ,oBAAiB;AAC/C,SAAK,YAAY,KAAK,QAAQ,qBAAiB;AAC/C,SAAK,aAAa,KAAK,QAAQ,sBAAkB;AACjD,SAAK,aAAa,KAAK,QAAQ,uBAAkB;AACjD,SAAK,YAAY,KAAK,QAAQ,sBAAiB;AAC/C,SAAK,YAAY,KAAK,QAAQ,uBAAiB;AAE/C,SAAK,SAAS,KAAK,GAAG,aAAW;AACjC,SAAK,SAAS,KAAK,GAAG,aAAW;AACjC,SAAK,UAAU,KAAK,GAAG,cAAY;AACnC,SAAK,SAAS,KAAK,GAAG,aAAW;AACjC,SAAK,QAAQ,KAAK,GAAG,YAAU;AAC/B,SAAK,SAAS,KAAK,GAAG,aAAW;AACjC,SAAK,QAAQ,KAAK,GAAG,YAAU;AAC/B,SAAK,UAAU,KAAK,GAAG,cAAY;AACnC,SAAK,UAAU,KAAK,GAAG,cAAY;AACnC,SAAK,SAAS,KAAK,GAAG,aAAW;AACjC,SAAK,SAAS,KAAK,GAAG,cAAW;AACjC,SAAK,QAAQ,KAAK,GAAG,aAAU;AAC/B,SAAK,YAAY,KAAK,GAAG,iBAAc;AACvC,SAAK,YAAY,KAAK,GAAG,iBAAc;AACvC,SAAK,WAAW,KAAK,GAAG,gBAAa;AACrC,SAAK,UAAU,KAAK,GAAG,eAAY;AACnC,SAAK,SAAS,KAAK,GAAG,cAAW;AAAA,EACnC;AAAA,EAEA,OAAO,WAAW,QAAuB;AACvC,WAAO,IAAI;AAAA,MACT,OAAO;AAAA,MACP,OAAO;AAAA,MACP,OAAO;AAAA,MACP,OAAO;AAAA,MACP,OAAO;AAAA,IACT;AAAA,EACF;AAAA,EAEA,QAAQ;AACN,WAAO,SAAQ,WAAW,IAAI;AAAA,EAChC;AACF;AAEO,IAAM,iBAAiB,IAAI;AAAA,EAChC,kBAAc,kBAAa,qBAAgB;AAAA,EAC3C,gBAAc;AAAA,EACd;AAAA;AAAA,EACA,eACE,iBACA,eACA,iBACA,iBACA,oBACA,oBACA;AAAA,EACF;AAAA,IACE;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,IAClE;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,IAClE;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,EAC5C;AACF;;;AC9HO,IAAM,iBAAN,MAAqB;AAAA;AAAA,EA8B1B,cAAc;AA5Bd;AAAA,SAAQ,kBAAkB,IAAI,aAAuB;AACrD,SAAS,iBAAiB,KAAK,gBAAgB;AAE/C,SAAQ,kBAAkB,IAAI,aAAuB;AACrD,SAAS,iBAAiB,KAAK,gBAAgB;AAE/C,SAAQ,mBAAmB,IAAI,aAAqB;AACpD,SAAS,kBAAkB,KAAK,iBAAiB;AAEjD,SAAQ,mBAAmB,IAAI,aAAmB;AAClD,SAAS,kBAAkB,KAAK,iBAAiB;AAEjD,SAAQ,qBAAqB,IAAI,aAAmB;AACpD,SAAS,oBAAoB,KAAK,mBAAmB;AAGrD;AAAA,SAAQ,IAAI;AACZ,SAAQ,aAA0B,IAAI,MAAM,GAAG,EAAE,KAAK,QAAQ;AAE9D,SAAQ,gBAAgB;AACxB;AAAA,SAAQ,SAAS;AACjB;AAAA,SAAQ,aAAa;AACrB;AAAA,SAAQ,SAAS;AACjB;AAAA,SAAQ,UAAU;AAElB;AAAA,SAAQ,aAAuB,CAAC;AAChC;AAAA,SAAQ,aAAuB,CAAC;AAG9B,SAAK,UAAU;AAAA,EACjB;AAAA,EAEQ,eAAe;AACrB,SAAK,gBAAgB;AACrB,SAAK,iBAAiB,KAAK;AAAA,EAC7B;AAAA,EAEQ,iBAAiB;AACvB,SAAK,gBAAgB;AACrB,SAAK,mBAAmB,KAAK;AAAA,EAC/B;AAAA,EAEA,IAAI,OAAO;AACT,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,UAAU;AACZ,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,QAAQ,GAAY;AACtB,SAAK,IAAI;AAET,UAAM,aAA0B,IAAI,MAAM,GAAG,EAAE,KAAK,QAAQ;AAE5D,QAAI,EAAE,UAAU;AACd,iBAAW,EAAE,KAAK,IAAI;AACtB,iBAAW,EAAE,KAAK,IAAI;AACtB,iBAAW,EAAE,MAAM,IAAI;AACvB,iBAAW,EAAE,OAAO,IAAI;AACxB,iBAAW,EAAE,MAAM,IAAI;AACvB,UAAI,EAAE,UAAU;AACd,mBAAW,EAAE,SAAS,IAAI;AAC1B,mBAAW,EAAE,QAAQ,IAAI;AAAA,MAC3B;AAAA,IACF;AACA,QAAI,EAAE,UAAU;AACd,iBAAW,EAAE,OAAO,IAAI;AAAA,IAC1B;AACA,QAAI,EAAE,QAAQ;AACZ,iBAAW,EAAE,OAAO,IAAI;AACxB,iBAAW,EAAE,MAAM,IAAI;AAAA,IACzB;AACA,QAAI,EAAE,QAAQ;AACZ,iBAAW,EAAE,MAAM,IAAI;AACvB,iBAAW,EAAE,MAAM,IAAI;AACvB,iBAAW,EAAE,MAAM,IAAI;AAAA,IACzB;AACA,eAAW,CAAC,IAAI;AAEhB,SAAK,aAAa;AAElB,QAAI,CAAC,KAAK,EAAE,QAAQ;AAClB,WAAK,aAAa;AAClB,WAAK,aAAa;AAAA,IACpB;AAAA,EACF;AAAA,EAEQ,eAAe;AACrB,SAAK,WAAW,SAAS;AAAA,EAC3B;AAAA,EAEQ,eAAe;AACrB,QAAI,KAAK,iBAAiB,MAAO;AACjC,SAAK,gBAAgB,KAAK,KAAK,UAAU;AACzC,SAAK,aAAa;AAAA,EACpB;AAAA,EAEQ,cAAc,KAAe;AACnC,SAAK,WAAW,KAAK,GAAG,GAAG;AAAA,EAC7B;AAAA,EAEQ,mBAAmB;AACzB,QAAI,KAAK,WAAW,UAAU,GAAG;AAC/B,WAAK,aAAa,KAAK;AAAA,IACzB;AAAA,EACF;AAAA,EAEQ,eAAe;AACrB,SAAK,WAAW,SAAS;AACzB,SAAK,iBAAiB;AAAA,EACxB;AAAA,EAEQ,eAAe;AACrB,SAAK,gBAAgB,KAAK,KAAK,UAAU;AACzC,SAAK,aAAa;AAAA,EACpB;AAAA,EAEQ,cAAc,GAAW;AAC/B,SAAK,WAAW,KAAK,CAAC;AAAA,EACxB;AAAA,EAEQ,6BAA6B,GAAW;AAC9C,QAAI,KAAK,EAAE,SAAS;AAClB,cAAQ,GAAG;AAAA,QACT,KAAK;AACH,cAAI,KAAK,SAAS,EAAG,MAAK;AAC1B,eAAK,cAAc,CAAC,EAAE,CAAC;AACvB;AAAA,QACF,KAAK,KAAK;AACR,gBAAM,SAAS,IAAK,KAAK,SAAS;AAClC,eAAK,UAAU;AACf,eAAK;AAAA,YACH,KAAK,EAAE,iBAAiB,IAAI,MAAM,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,GAAG;AAAA,UAC3D;AACA;AAAA,QACF;AAAA,QACA,KAAK;AACH,cAAI,KAAK,EAAE,SAAS;AAClB,iBAAK,aAAa,KAAK,SAAS;AAChC,iBAAK,cAAc,CAAC,IAAI,EAAE,CAAC;AAAA,UAC7B,WAAW,KAAK,EAAE,UAAU;AAC1B,iBAAK,SAAS;AACd,iBAAK,cAAc,CAAC,EAAE,CAAC;AAAA,UACzB,OAAO;AACL,iBAAK,aAAa,KAAK;AACvB,iBAAK,cAAc,CAAC,EAAE,CAAC;AAAA,UACzB;AACA;AAAA,QACF,KAAK;AACH,cAAI,KAAK,EAAE,WAAW,KAAK,UAAU,GAAG;AAAA,UAExC,WAAW,KAAK,EAAE,SAAS;AACzB,gBAAI,KAAK,EAAE,SAAU,MAAK,aAAa,KAAK,SAAS;AACrD,iBAAK,cAAc,CAAC,EAAE,CAAC;AAAA,UACzB,OAAO;AACL,iBAAK,aAAa,KAAK,SAAS;AAChC,iBAAK,cAAc,CAAC,EAAE,CAAC;AAAA,UACzB;AACA;AAAA,QACF;AACE,cAAI,EAAE,KAAK,EAAE,WAAW,uBAAuB,CAAC,GAAI,MAAK;AACzD,eAAK,cAAc,KAAK,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;AACtD;AAAA,MACJ;AAAA,IACF,OAAO;AACL,WAAK,cAAc,CAAC,CAAC,CAAC;AAAA,IACxB;AAAA,EACF;AAAA,EAEQ,YAAY,OAA0B,KAAe;AAC3D,QAAI,OAAO,SAAS,SAAU,SAAQ,CAAC,KAAK;AAE5C,eAAW,KAAK,OAAO;AACrB,UAAI,KAAK,EAAE,aAAa,QAAQ,CAAC,KAAK,KAAK,OAAO,CAAC,KAAK;AACtD,aAAK,cAAc,CAAC,IAAc,IAAI,EAAI,CAAC;AAC3C,aAAK,UAAU;AAAA,MACjB,OAAO;AACL,aAAK,6BAA6B,CAAC;AAAA,MACrC;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,6BAA6B,GAAW;AAC9C,QAAI,KAAK,IAAI;AACX,UAAI,KAAK,EAAE,QAAS;AACpB,UAAI,KAAK,EAAE,QAAS,KAAI;AAAA,IAC1B,WAAW,KAAK,MAAM,KAAK,EAAE,SAAS;AACpC,UAAI;AAAA,IACN;AAEA,QAAI,KAAK,EAAE,YAAY,KAAK,IAAI;AAE9B,UAAI,KAAK,EAAE,UAAU,KAAK,EAAE,UAAU;AACpC,aAAK,YAAY,IAAI,IAAI;AACzB,aAAK,aAAa;AAAA,MACpB;AACA,WAAK,cAAc,EAAE;AACrB,WAAK,aAAa;AAAA,IACpB,WAAW,KAAK,EAAE,QAAQ;AACxB,WAAK,cAAc;AACnB,WAAK,iBAAiB;AACtB,UAAI,KAAK,IAAI;AACX,aAAK,YAAY,IAAI,IAAI;AAAA,MAC3B,OAAO;AACL,aAAK,YAAY,CAAC;AAAA,MACpB;AACA,WAAK,aAAa;AAClB,WAAK,cAAc,CAAC;AAAA,IACtB,OAAO;AACL,WAAK,cAAc,CAAC;AAAA,IACtB;AAAA,EAEF;AAAA,EAEQ,MAAM,MAAsC;AAClD,QAAI,KAAK,WAAW,UAAU,EAAG;AAEjC,QAAI,QAAQ,SAAS;AACnB,UAAI,CAAC,KAAK,EAAE,QAAQ;AAClB,aAAK,aAAa;AAClB;AAAA,MACF;AACA,UAAI,CAAC,KAAK,EAAE,WAAW,CAAC,KAAK,EAAE,YAAY,CAAC,KAAK,EAAE,SAAS;AAC1D,aAAK,aAAa;AAClB,aAAK,cAAc;AACnB,aAAK,YAAY,KAAK,EAAE,MAAM;AAC9B,YAAI,KAAK,EAAE,QAAS,MAAK,YAAY,IAAI,IAAI;AAC7C;AAAA,MACF;AAAA,IACF;AAEA,QAAI,cAAc;AAClB,aAAS,MAAM,KAAK,WAAW,SAAS,GAAG,OAAO,GAAG,OAAO;AAC1D,YAAM,IAAI,KAAK,WAAW,GAAG;AAC7B,UAAI,KAAK,EAAE,WAAW,uBAAuB,CAAC,EAAG;AAEjD,UAAI,QAAQ,WAAW;AACrB,YAAI,QAAQ,CAAC,KAAK,KAAK,IAAgB;AACrC,wBAAc;AAAA,QAChB,WAAW,YAAa;AAAA,MAC1B;AAEA,YAAM,cAAc,KAAK,WAAW,OAAO,GAAG;AAC9C,UAAI,KAAK,EAAE,QAAQ;AACjB,YAAI,KAAK,EAAE,WAAW;AACpB,eAAK,aAAa;AAClB,eAAK,YAAY,WAAW;AAAA,QAC9B,WAAW,QAAQ,YAAY,CAAC,KAAK,EAAE,SAAS;AAC9C,eAAK,YAAY,KAAK,EAAE,OAAO;AAAA,QACjC,WAAW,KAAK,KAAK;AACnB,cAAI,QAAQ;AACZ,cAAI,WAAW;AAEf,mBAASC,OAAM,KAAK,WAAW,SAAS,GAAGA,QAAO,GAAGA,QAAO;AAC1D,kBAAMC,KAAI,KAAK,WAAWD,IAAG;AAC7B,gBAAIC,MAAK,KAAK;AACZ,yBAAW;AACX;AAAA,YACF,WAAW,QAAQA,EAAC,GAAG;AACrB,kBAAI,KAAK,EAAE,UAAW,UAAS;AAAA,YACjC,WAAW,KAAK,EAAE,WAAW,uBAAuBA,EAAC,GAAG;AAAA,YAExD,OAAO;AACL;AAAA,YACF;AAAA,UACF;AACA,cAAI,CAAC,SAAU,UAAS,KAAK;AAE7B,kBAAQ,IAAK,QAAQ;AACrB,eAAK,cAAc,IAAI,MAAM,KAAK,EAAE,KAAK,EAAE,CAAC;AAC5C,eAAK,SAAS,KAAK,IAAI,GAAG,KAAK,SAAS,KAAK;AAAA,QAC/C,OAAO;AACL,cAAI,QAAQ,CAAC,KAAK,KAAK,EAAE,WAAW;AAClC,iBAAK,YAAY,CAAC,IAAI,IAAI,EAAE,GAAG,IAAI;AAAA,UACrC;AACA,cAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,EAAE,WAAW;AAEnC,iBAAK,YAAY,CAAC,IAAI,IAAI,EAAE,GAAG,IAAI;AAAA,UACrC;AAAA,QACF;AAAA,MACF;AACA,UAAI,QAAQ,SAAU;AAAA,IACxB;AACA,QAAI,KAAK,WAAW,UAAU,GAAG;AAC/B,WAAK,aAAa;AAClB,UAAI,KAAK,EAAE,OAAQ,MAAK,cAAc;AAAA,IACxC;AAAA,EACF;AAAA,EAEQ,eAAe;AACrB,QAAI,CAAC,KAAK,SAAS;AACjB,WAAK,YAAY,IAAc,IAAI;AACnC,WAAK,UAAU;AAAA,IACjB;AAAA,EACF;AAAA,EAEQ,gBAAgB;AACtB,QAAI,KAAK,SAAS;AAChB,WAAK,YAAY,IAAc,IAAI;AACnC,WAAK,UAAU;AAAA,IACjB;AAAA,EACF;AAAA,EAEQ,OAAO,KAAa,GAAW;AACrC,SAAK,iBAAiB,KAAK,GAAG;AAC9B,QAAI,CAAC,KAAK,EAAE,UAAU;AACpB,WAAK,aAAa;AAClB,WAAK,aAAa;AAAA,IACpB;AACA,QAAI,KAAK,EAAE,OAAQ,MAAK,aAAa;AACrC,QAAI,KAAK,EAAE,OAAQ,MAAK,YAAY,CAAC;AACrC,SAAK,aAAa;AAAA,EACpB;AAAA,EAEQ,iBAAiB;AACvB,QAAI,KAAK,iBAAiB,SAAS,KAAK,EAAE,UAAU,KAAK,EAAE,SAAS;AAClE,WAAK,aAAa;AAClB,WAAK,aAAa;AAAA,IACpB;AAAA,EACF;AAAA,EAEQ,cAAc;AACpB,SAAK,SAAS;AACd,QAAI,KAAK,EAAE,QAAQ;AACjB,WAAK,cAAc;AACnB,UAAI,KAAK,EAAE,WAAW;AACpB,aAAK,YAAY,CAAC,IAAc,EAAE,GAAG,IAAI;AACzC,aAAK,aAAa;AAAA,MACpB;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,UAAU;AAChB,SAAK,cAAc;AACnB,SAAK,YAAY,KAAK,EAAE,SAAS;AACjC,SAAK,YAAY,IAAI,IAAI;AACzB,SAAK,YAAY,KAAK,UAAU;AAAA,EAClC;AAAA,EAEA,eAAe,KAAwB;AACrC,UAAM,MAAM,OAAO,OAAO,WAAW,kBAAkB,GAAG,IAAI;AAE9D,aAAS,KAAK,KAAK;AACjB,UAAI,KAAK,EAAE,SAAU,MAAK;AAC1B,UAAI,KAAK,EAAE,WAAW,KAAK,EAAE,SAAU,KAAI,QAAQ,CAAC;AAEpD,YAAM,YAAY,KAAK,SAAS,WAAW,KAAK,WAAW,CAAC;AAC5D,WAAK,SAAS;AAEd,cAAQ,WAAW;AAAA,QACjB,KAAK;AACH,eAAK,eAAe;AACpB,eAAK,6BAA6B,CAAC;AACnC;AAAA,QACF,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,eAAK,eAAe;AACpB,eAAK,MAAM,SAAS;AACpB,eAAK,aAAa;AAClB;AAAA,QACF,KAAK;AACH,eAAK,eAAe;AACpB,eAAK,aAAa;AAClB;AAAA,QACF,KAAK;AACH,eAAK,eAAe;AACpB,cAAI,KAAK,EAAE,QAAQ;AACjB,iBAAK,YAAY,CAAC;AAClB,iBAAK,aAAa;AAAA,UACpB;AACA,eAAK,cAAc,CAAC;AACpB,eAAK,aAAa;AAClB;AAAA,QACF,KAAK;AACH,eAAK,eAAe;AACpB,eAAK,YAAY;AACjB;AAAA,QACF,KAAK;AACH,eAAK,eAAe;AACpB,eAAK,QAAQ;AACb,eAAK,aAAa;AAClB;AAAA,QACF,KAAK;AACH,eAAK,aAAa;AAClB,eAAK,aAAa;AAClB;AAAA,QACF,KAAK;AACH,eAAK,eAAe;AACpB;AAAA,QACF,KAAK;AACH,eAAK,OAAO,UAAU,CAAC;AACvB;AAAA,QACF,KAAK;AACH,eAAK,OAAO,WAAW,CAAC;AACxB;AAAA,QACF,KAAK;AACH,eAAK,OAAO,WAAW,CAAC;AACxB;AAAA,MACJ;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,EAAE,UAAU;AACpB,WAAK,aAAa;AAAA,IACpB;AAAA,EACF;AAAA,EAEA,eAAe,KAAwB;AACrC,QAAI,KAAK,iBAAiB,OAAO;AAC/B,YAAM;AAAA,IACR;AAEA,UAAM,MAAM,OAAO,OAAO,WAAW,kBAAkB,GAAG,IAAI;AAE9D,eAAW,KAAK,IAAK,MAAK,6BAA6B,CAAC;AACxD,SAAK,aAAa;AAAA,EACpB;AACF;;;AC7cA,IAAM,cAAc;AAEpB,IAAM,SAAN,MAAuC;AAAA,EAYrC,YAAoB,OAA+B,OAAc;AAA7C;AAA+B;AAXnD,SAAQ,cAA6B,CAAC;AAEtC,SAAQ,WAAW,IAAI,aAAuC;AAC9D,SAAS,UAAU,KAAK,SAAS;AAEjC,SAAQ,yBAAmC,CAAC;AAC5C,SAAQ,kBAAkB;AAMxB,UAAM,eAAe,MAAM;AACzB,UAAI,KAAK,uBAAuB,UAAU,GAAG;AAC3C,aAAK,kBAAkB;AAEvB,cAAM,MAAM,IAAI,WAAW,KAAK,uBAAuB,OAAO,GAAG,IAAI,CAAC;AAEtE,YAAI,KAAK,uBAAuB,UAAU;AACxC,eAAK,eAAe;AAEtB,aAAK,SAAS,KAAK,CAAC,KAAK,YAAY,CAAC;AAAA,MACxC,OAAO;AACL,aAAK,kBAAkB;AAAA,MACzB;AAAA,IACF;AAEA,SAAK,MAAM,eAAe,CAAC,QAAQ;AACjC,WAAK,uBAAuB,KAAK,GAAG,GAAG;AACvC,UAAI,CAAC,KAAK,gBAAiB,cAAa;AAAA,IAC1C,CAAC;AAED,UAAM,EAAE,gBAAgB,aAAa,IAAI,MAAM,eAAe;AAC9D,SAAK,iBAAiB;AACtB,SAAK,eAAe;AAAA,EACtB;AAAA,EAEA,SAAS,OAAiB;AACxB,SAAK,QAAQ,CAAC,CAAC,KAAK,QAAQ,MAAM,MAAM,MAAM,KAAK,QAAQ,CAAC;AAE5D,UAAM,SAAS,CAAC,QAAgB,KAAK,MAAM,eAAe,GAAG;AAE7D,SAAK,YAAY;AAAA,MACf,MAAM,OAAO,MAAM;AAAA,MACnB,MAAM,SAAS,MAAM;AAAA,MACrB,MAAM,SAAS,CAAC,EAAE,MAAM,KAAK,MAAM,KAAK,aAAa,MAAM,IAAI,CAAC;AAAA,IAClE;AAAA,EACF;AAAA,EAEA,UAAgB;AACd,SAAK,YAAY,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC;AAC3C,SAAK,YAAY,SAAS;AAAA,EAC5B;AACF;AAEO,IAAM,QAAN,MAAY;AAAA,EAejB,YAAoB,OAAuB;AAAvB;AAdpB,SAAQ,cAAc,IAAI,aAAmB;AAC7C,SAAS,aAAa,KAAK,YAAY;AAEvC,SAAQ,cAAc,IAAI,aAAmB;AAC7C,SAAS,aAAa,KAAK,YAAY;AAEvC,SAAQ,YAAY,IAAI,aAAqB;AAC7C,SAAS,WAAW,KAAK,UAAU;AAEnC,SAAQ,yBAAmC,CAAC;AAC5C,SAAQ,yBAAmC,CAAC;AAE5C,SAAQ,UAA4B,CAAC,IAAI,EAAE;AAGzC,SAAK,MAAM,eAAe,CAAC,QAAQ;AACjC,WAAK,uBAAuB,KAAK,GAAG,GAAG;AACvC,WAAK,YAAY,KAAK;AAAA,IACxB,CAAC;AAED,SAAK,MAAM,gBAAgB,MAAM;AAC/B,UAAI,KAAK,uBAAuB,UAAU,GAAG;AAC3C,aAAK,MAAM,eAAe,KAAK,sBAAsB;AACrD,aAAK,uBAAuB,SAAS;AAAA,MACvC;AAAA,IACF,CAAC;AAED,SAAK,MAAM,gBAAgB,CAAC,QAAQ;AAClC,WAAK,UAAU,KAAK,GAAG;AAAA,IACzB,CAAC;AAAA,EACH;AAAA,EAEA,iBAAiB;AACf,WAAO;AAAA,MACL,gBAAgB,MAAM,KAAK,YAAY,KAAK;AAAA,MAC5C,cAAc,CAAC,MAAc,SAAiB;AAC5C,aAAK,UAAU,CAAC,MAAM,IAAI;AAC1B,aAAK,UAAU,KAAK,UAAU;AAAA,MAChC;AAAA,IACF;AAAA,EACF;AAAA,EAEA,IAAI,WAAW;AACb,WAAO,KAAK,uBAAuB,UAAU;AAAA,EAC/C;AAAA,EAEA,KAAK,QAAiB;AACpB,UAAM,MACJ,OAAO,WAAW,cACd,KAAK,IAAI,KAAK,uBAAuB,QAAQ,MAAM,IACnD,KAAK,uBAAuB;AAClC,WAAO,KAAK,uBAAuB,OAAO,GAAG,GAAG;AAAA,EAClD;AAAA,EAEA,IAAI,WAAW;AACb,WAAO,KAAK,uBAAuB,UAAU;AAAA,EAC/C;AAAA,EAEA,MAAM,KAAwB;AAC5B,UAAM,MAAM,OAAO,OAAO,WAAW,kBAAkB,GAAG,IAAI;AAC9D,SAAK,yBAAyB,KAAK,uBAAuB,OAAO,GAAG;AAEpE,QAAI,KAAK,MAAM,MAAM;AACnB,WAAK,MAAM,eAAe,KAAK,sBAAsB;AACrD,WAAK,uBAAuB,SAAS;AAAA,IACvC;AAAA,EACF;AAAA,EAKA,MAAM,KAAyC,KAAW;AACxD,YAAQ,KAAK;AAAA,MACX,KAAK;AACH,eAAO,KAAK,MAAM,QAAQ,MAAM;AAAA,MAClC,KAAK;AACH,aAAK,MAAM,UAAU,QAAQ,WAAW,GAAG;AAC3C;AAAA,MACF,KAAK;AACH,eAAO,KAAK,QAAQ,MAAM;AAAA,IAC9B;AAAA,EACF;AACF;AAEO,IAAM,UAAU,MAAM;AAC3B,QAAM,QAAQ,IAAI,eAAe;AACjC,QAAM,QAAQ,IAAI,MAAM,KAAK;AAC7B,QAAM,SAAS,IAAI,OAAO,OAAO,KAAK;AACtC,SAAO,EAAE,QAAQ,MAAM;AACzB;;;ACtKO,IAAM,gBAAgB,CAAC,YAAqB;AAClD,QAAM,OAAO,CAAC,QAAQ,OAAO,QAAQ,OAAO,QAAQ,OAAO,QAAQ,KAAK;AACxE,MAAI,OAAO;AACX,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,QAAQ,GAAG,QAAQ,KAAK;AAC1C,YAAQ,QAAQ,GAAG,CAAC,KAAK;AACzB,cAAU;AACV,QAAI,UAAU,IAAI;AACnB,WAAK,KAAK,IAAI;AACd,aAAO;AACP,eAAS;AAAA,IACR;AAAA,EACF;AACA,OAAK,KAAK,IAAI;AACd,SAAO;AACN;AAEO,IAAM,gBAAgB,CAAC,SAA4B;AAC3D,QAAM,KAAe,CAAC;AACtB,MAAI,MAAM;AACV,MAAI,OAAO,KAAK,KAAK;AACrB,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AAC3B,OAAG,KAAM,QAAQ,SAAU,GAAI;AAC/B,cAAU;AACV,QAAI,UAAU,IAAI;AACnB,aAAO,KAAK,KAAK;AACjB,eAAS;AAAA,IACR;AAAA,EACF;AACA,SAAO,IAAI,QAAQ,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE;AACxD;;;ACnCK,IAAM,YAAN,MAAgB;AAAA,EAIrB,YAAY,QAA2B;AACrC,SAAK,aAAa,IAAI,WAAW,QAAQ,GAAG,CAAC;AAC7C,SAAK,aAAa,IAAI,WAAW,QAAQ,CAAC;AAAA,EAC5C;AAAA,EAEQ,IAAI,GAAe;AACzB,SAAK,WAAW,CAAC,IAAI;AACrB,SAAK,YAAY,CAAC;AAClB,YAAQ,KAAK,KAAK,YAAY,GAAG,CAAC;AAAA,EACpC;AAAA,EAEA,OAAO,QAA4B;AACjC,QAAI,CAAC,OAAQ,UAAS,KAAK,WAAW,SAAS;AAC/C,SAAK,IAAI,EAAE,gBAAgB,QAAQ,OAAO,CAAC;AAC3C,UAAM,MAAM,KAAK,WAAW,CAAC;AAC7B,WAAO,MAAM,KAAK,KAAK,WAAW,MAAM,GAAG,MAAM,CAAC,CAAC;AAAA,EACrD;AAAA,EAEA,QAAQ,KAAe;AACrB,SAAK,IAAI,EAAE,gBAAgB,SAAS,IAAI,CAAC;AAAA,EAC3C;AAAA,EAEA,kBAAkB,SAAiB;AACjC,SAAK,IAAI,EAAE,gBAAgB,QAAQ,QAAQ,CAAC;AAC5C,WAAO,KAAK,WAAW,CAAC,KAAK;AAAA,EAC/B;AAAA,EAEA,gBAAgB;AACd,SAAK,IAAI,EAAE,gBAAgB,SAAS,CAAC;AACrC,WAAO,cAAc,MAAM,KAAK,KAAK,WAAW,MAAM,GAAG,EAAE,CAAC,CAAC;AAAA,EAC/D;AAAA,EAEA,cAAc,SAAkB;AAC9B,UAAM,OAAO,cAAc,OAAO;AAClC,SAAK,IAAI,EAAE,gBAAgB,UAAU,KAAK,CAAC;AAAA,EAC7C;AAAA,EAEA,oBAAoB;AAClB,SAAK,IAAI,EAAE,gBAAgB,aAAa,CAAC;AACzC,WAAO,CAAC,KAAK,WAAW,CAAC,GAAG,KAAK,WAAW,CAAC,CAAC;AAAA,EAChD;AACF;;;AC1CO,IAAM,YAAN,MAAgB;AAAA,EAiBrB,YAAoB,OAAc;AAAd;AAhBpB,SAAQ,SAAS,IAAI,kBAAkB,IAAI,GAAG;AAC9C,SAAQ,aAAa,IAAI,WAAW,KAAK,QAAQ,GAAG,CAAC;AACrD,SAAQ,aAAa,IAAI,WAAW,KAAK,QAAQ,CAAC;AAElD,SAAQ,QAAe;AACvB,SAAQ,iBAAwC;AAQhD,yBAA0B,CAAC;AAC3B,uBAAwB,CAAC;AAuEzB,SAAQ,QAA6B;AApEnC,UAAM,WAAW,MAAM;AACrB,UAAI,KAAK,cAAc,UAAU,EAAG,MAAK,eAAe;AAAA,IAC1D,CAAC;AAED,UAAM,WAAW,MAAM;AACrB,WAAK,YAAY,KAAK,GAAG,MAAM,KAAK,CAAC;AAErC,cAAQ,KAAK,OAAO;AAAA,QAClB,KAAK;AACH,eAAK,gBAAgB,CAAC;AACtB;AAAA,QACF,KAAK;AACH,eAAK,aAAa,KAAK,YAAY,MAAM;AACzC;AAAA,MACJ;AAAA,IACF,CAAC;AAED,UAAM,SAAS,CAAC,QAAQ;AACtB,cAAQ,KAAK,YAAY,GAAG,uBAAuB;AAAA,IAErD,CAAC;AAAA,EACH;AAAA,EA/BA,MAAM;AACJ,YAAQ,MAAM,KAAK,YAAY,GAAG,CAAC;AACnC,YAAQ,OAAO,KAAK,YAAY,CAAC;AACjC,SAAK,QAAQ;AAAA,EACf;AAAA,EA6BA,aAAa,QAAgB;AAC3B,QAAI,KAAK,SAAS,QAAS,OAAM;AACjC,QAAI,SAAS,KAAK,WAAW,SAAS;AACpC,eAAS,KAAK,WAAW,SAAS;AACpC,UAAM,MAAM,KAAK,YAAY,OAAO,GAAG,MAAM;AAC7C,SAAK,WAAW,CAAC,IAAI,IAAI;AACzB,SAAK,WAAW,IAAI,KAAK,CAAC;AAC1B,SAAK,IAAI;AAAA,EACX;AAAA,EAEA,iBAAiB;AACf,QAAI,KAAK,cAAc,UAAU,EAAG,OAAM;AAC1C,QAAI,KAAK,MAAM,UAAU;AACvB,WAAK,IAAI;AACT,WAAK,MAAM,MAAM,KAAK,cAAc,OAAO,CAAC,CAAC;AAAA,IAC/C;AAAA,EACF;AAAA,EAEA,gBAAgB,SAAiB;AAC/B,QAAI,KAAK,SAAS,OAAQ,OAAM;AAEhC,QAAI,KAAK,gBAAgB;AACvB,mBAAa,KAAK,cAAc;AAChC,WAAK,iBAAiB;AAAA,IACxB;AAEA,QAAI,KAAK,YAAY,SAAS,GAAG;AAC/B,WAAK,WAAW,CAAC,IAAI;AACrB,WAAK,IAAI;AAAA,IACX,OAAO;AACL,UAAI,UAAU,GAAG;AAAA,MAEjB,WAAW,UAAU,GAAG;AAEtB,aAAK,iBAAiB;AAAA,UACpB,MAAM,KAAK,gBAAgB,CAAC;AAAA,UAC5B,UAAU;AAAA,QACZ;AAAA,MACF,OAAO;AACL,aAAK,WAAW,CAAC,IAAI;AACrB,aAAK,IAAI;AAAA,MACX;AAAA,IACF;AAAA,EACF;AAAA,EAIA,MAAM,QAAgB,UAA4C;AAChE,SAAK,KAAK;AACV,QAAI,OAAO;AACX,SAAK,QAAQ,MAAO,OAAO;AAE3B,WAAO,YAAY,CAAC,OAA0B;AAC5C,YAAM,OAAO,GAAG;AAEhB,UAAI,OAAO,QAAQ,YAAY,KAAK,gBAAgB;AAClD,YAAI,KAAM;AAEV,cAAM,MAAkB;AAIxB,gBAAQ,IAAI,gBAAgB;AAAA,UAC1B,KAAK;AACH,iBAAK,QAAQ;AACb,gBAAI,KAAK,YAAY,UAAU,EAAG,MAAK,aAAa,IAAI,MAAM;AAC9D;AAAA,UACF,KAAK;AACH,iBAAK,cAAc,KAAK,GAAG,IAAI,GAAG;AAClC,iBAAK,eAAe;AACpB;AAAA,UACF,KAAK;AACH,iBAAK,QAAQ;AACb,iBAAK,gBAAgB,IAAI,OAAO;AAChC;AAAA,UACF,KAAK;AACH,iBAAK,WAAW,IAAI,cAAc,KAAK,MAAM,MAAM,QAAQ,CAAC,CAAC;AAC7D,iBAAK,IAAI;AACT;AAAA,UACF,KAAK;AACH,iBAAK,MAAM,MAAM,UAAU,cAAc,IAAI,IAAI,CAAC;AAClD,iBAAK,IAAI;AACT;AAAA,UACF,KAAK,cAAc;AACjB,kBAAM,CAAC,MAAM,IAAI,IAAI,KAAK,MAAM,MAAM,YAAY;AAClD,iBAAK,WAAW,CAAC,IAAI;AACrB,iBAAK,WAAW,CAAC,IAAI;AACrB,iBAAK,IAAI;AACT;AAAA,UACF;AAAA,QACF;AAAA,MACF,WAAW,UAAU;AACnB,iBAAS,EAAE;AAAA,MACb;AAAA,IACF;AAGA,WAAO,YAAY,KAAK,MAAM;AAAA,EAChC;AAAA,EAEA,OAAO;AACL,QAAI,KAAK,MAAO,MAAK,MAAM;AAAA,EAC7B;AACF;","names":["Flags","idx","c"]}